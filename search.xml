<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高阶函数、高阶组件</title>
      <link href="2021/07/22/js-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>2021/07/22/js-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>高阶函数是一类特别的函数，满足以下两点任一点就是高阶函数</p><ul><li>接受函数类型的参数</li><li>返回值是函数</li></ul><h3 id="常见的高阶函数有"><a href="#常见的高阶函数有" class="headerlink" title="常见的高阶函数有"></a>常见的高阶函数有</h3><ul><li>定时器：setTimeout()/setInterval()</li><li>Promise:Promise(() =&gt; {}) then(value =&gt; {},reason =&gt; {})</li><li>数组遍历相关的方法：forEach()/filter()/map()/reduce()/find()/findIndex()</li><li>函数对象的bind()</li><li>Form.create()() / getFieldDecorator()()</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>高阶函数更新动态，更加具有扩展性</p><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>本质就是一个函数</li><li>接收一个组件(被包装组件)，返回一个新的组件(包装组件)，包装组件会向被包装组件传入特定属性</li><li>作用：扩展组件的功能</li><li>高阶组件也是高阶函数：接收一个组件函数，返回是一个新的组件函数</li></ul><h2 id="高阶组件与高阶函数的关系"><a href="#高阶组件与高阶函数的关系" class="headerlink" title="高阶组件与高阶函数的关系"></a>高阶组件与高阶函数的关系</h2><ul><li>高阶组件是特别的高阶函数</li><li>接收一个组件函数, 返回是一个新的组件函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs中fs的常用方法</title>
      <link href="2021/06/04/nodejs-fs%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>2021/06/04/nodejs-fs%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>flag <string> 参见文件系统 flag 的支持。 默认值: ‘w’。</p><ul><li>w 写入</li><li>r 读取</li><li>a 追回</li></ul></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="open、write、close"><a href="#open、write、close" class="headerlink" title="open、write、close"></a>open、write、close</h3><blockquote><p>   打开文件<br>fs.open(path[, flags[, mode]], callback)<br>fs.openSync(path[, flags, mode])<br><br>将 string 写入到 fd 指定的文件<br>fs.write(fd, string[, position[, encoding]], callback)<br>fs.writeSync(fd, buffer[, offset[, length[, position]]])<br><br>关闭fd文件<br>fs.close(fd, callback)<br>fs.closeSync(fd)</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 同步方法：</span><span class="token comment" spellcheck="true">// let fd = fs.openSync('hello.txt','w')</span><span class="token comment" spellcheck="true">// fs.writeSync(fd,'同步方法写入\n')</span><span class="token comment" spellcheck="true">// fs.closeSync(fd)</span><span class="token comment" spellcheck="true">// 异步方法：</span><span class="token comment" spellcheck="true">// fs.open('hello.txt','a',function(err,fd){</span><span class="token comment" spellcheck="true">//     if (err) throw err;</span><span class="token comment" spellcheck="true">//     fs.write(fd,'异步方法写入\n',function(err){</span><span class="token comment" spellcheck="true">//         if(err) throw err;</span><span class="token comment" spellcheck="true">//         fs.close(fd,function(){</span><span class="token comment" spellcheck="true">//             if(err) throw err;</span><span class="token comment" spellcheck="true">//             console.log('异步写入成功，关闭')</span><span class="token comment" spellcheck="true">//         })</span><span class="token comment" spellcheck="true">//     })</span><span class="token comment" spellcheck="true">// })</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="createWriteStream、createReadStream"><a href="#createWriteStream、createReadStream" class="headerlink" title="createWriteStream、createReadStream"></a>createWriteStream、createReadStream</h3><blockquote><p>同步、异步、简单文件写入都不适合大文件的写入，性能较差，容易导致内存溢出<br><br>    流式文件写入<br>    fs.createWriteStream(path[, options])<br><br>    流式文件读取<br>    fs.createReadStream(path[, options])<br></p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// let fw = fs.createWriteStream('a.mp3',{flags:'w'})</span><span class="token comment" spellcheck="true">// let fr = fs.createReadStream('b.mp3')</span><span class="token comment" spellcheck="true">// fw.once('open',function(){</span><span class="token comment" spellcheck="true">//     console.log('流式文件写入打开')</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// fw.once('close',function(){</span><span class="token comment" spellcheck="true">//     console.log('流式文件写入关闭')</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// fr.once('open',function(){</span><span class="token comment" spellcheck="true">//     console.log('流式文件读取打开')</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// fr.once('close',function(){</span><span class="token comment" spellcheck="true">//     console.log('流式文件读取关闭')</span><span class="token comment" spellcheck="true">//     // 读取结束后，关闭写入流</span><span class="token comment" spellcheck="true">//     fw.close()</span><span class="token comment" spellcheck="true">//  //  fw.end(); 都可以</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// // 读取可读流中的数据，必须为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据</span><span class="token comment" spellcheck="true">// // data最长长度为65536</span><span class="token comment" spellcheck="true">// fr.on('data',function(data){</span><span class="token comment" spellcheck="true">//     // 将读取到的数据写入到可写流中</span><span class="token comment" spellcheck="true">//     fw.write(data);</span><span class="token comment" spellcheck="true">//     // 读完后关闭可写流</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// rs.on('end',function(){</span><span class="token comment" spellcheck="true">//     console.log('读取结束,关闭之前执行')</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// rs.on('error',function(err){</span><span class="token comment" spellcheck="true">//     console.log(err)</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// ws.on('finish',()=>{</span><span class="token comment" spellcheck="true">//     console.log('写入完成')</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// 可读流打开了</span><span class="token comment" spellcheck="true">// 可写流打开了</span><span class="token comment" spellcheck="true">// 读取结束,关闭之前执行</span><span class="token comment" spellcheck="true">// 可读流关闭了</span><span class="token comment" spellcheck="true">// 写入完成</span><span class="token comment" spellcheck="true">// 可写流关闭了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="管道流-pipe"><a href="#管道流-pipe" class="headerlink" title="管道流 pipe"></a>管道流 pipe</h3><pre><code>// 写let ws = fs.createWriteStream(&#39;b.mp3&#39;)// 读let rs = fs.createReadStream(&quot;吴亦凡-翱翔.mp3&quot;)// pipe可将可读流中的内容直接写入到可写流中rs.pipe(ws)</code></pre><h3 id="readFile、writeFile"><a href="#readFile、writeFile" class="headerlink" title="readFile、writeFile"></a>readFile、writeFile</h3><blockquote><p>简单文件读取<br>fs.readFile(path[, options], callback)<br>        读取的文件返回的data格式是BUffer格式<br>fs.readFileSync(path[, options])<br><br>简单文件写入<br>fs.writeFile(file, data[, options], callback)<br>fs.writeFileSync(file, data[, options])</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.readFile('hello.txt',function(err,data){</span><span class="token comment" spellcheck="true">//     console.log(data.toString())</span><span class="token comment" spellcheck="true">//     fs.writeFile('hello2.txt', data, function(err){</span><span class="token comment" spellcheck="true">//         if(err) throw err</span><span class="token comment" spellcheck="true">//     })</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// let data = fs.readFileSync('hello.txt')</span><span class="token comment" spellcheck="true">// console.log(data.toString())</span><span class="token comment" spellcheck="true">// fs.writeFileSync('hello3.txt',data)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="writeFile"><a href="#writeFile" class="headerlink" title="writeFile"></a>writeFile</h3><blockquote><p>简单文件写入     {flag:’a’}追回的方式<br>    fs.writeFile(file, data[, options], callback)<br>  fs.writeFileSync(file, data[, options])</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.writeFile('hello.txt', '简单方式写入\n',{flag:'a'}, function(err){</span><span class="token comment" spellcheck="true">//     if(err) throw err;</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// fs.writeFileSync('hello.txt','简单方式写入，同步方法\n',{flag:'a'})</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="appendFile"><a href="#appendFile" class="headerlink" title="appendFile"></a>appendFile</h3><blockquote><p>追加数据到文件，如果文件尚不存在则创建文件<br>fs.appendFile(path, data[, options], callback)<br>fs.appendFileSync(path, data[, options])</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.appendFile('hello.txt','appendFile的方式向文件中追回内容',function(err){</span><span class="token comment" spellcheck="true">//     if(err) throw err;</span><span class="token comment" spellcheck="true">// })</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h3><blockquote><p>通过检查文件系统来测试给定的路径是否存在<br>fs.exists(path, callback)    弃用<br>fs.existsSync(path)<br>        返回结果：true:存在，false:不存在</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> res <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token string">'a23.mp3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(res)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h3><blockquote><p>获取文件的状态<br>    fs.stat(path[, options], callback)<br>    fs.statSync(path[, options])<br>    返回一个对象，对象中保存当前文件状态的相关信息<br>        size:文件的大小<br>        isFile:是否是一个文件<br>        isDirectory:是否是一个目录</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.stat('a.mp3', function(err,stats){</span><span class="token comment" spellcheck="true">//     console.log(stats)</span><span class="token comment" spellcheck="true">// })</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><blockquote><p>删除文件或符号链接<br>  对空或非空的目录均不起作用。 若要删除目录，则使用 fs.rmdir()。<br>  fs.unlink(path, callback)<br>  fs.unlinkSync(path)</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.unlinkSync('01.txt')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="readdir"><a href="#readdir" class="headerlink" title="readdir"></a>readdir</h3><blockquote><p>读取目录的内容<br>fs.readdir(path[, options], callback)<br>fs.readdirSync(path[, options])<br>        返回的files是一个字符串数组，每个元素就是一个文件夹或文件的名字</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.readdir('.', function(err,files){</span><span class="token comment" spellcheck="true">//     console.log(files)</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// let dir = fs.readdirSync('.')</span><span class="token comment" spellcheck="true">// console.log(dir)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="truncate-截断文件"><a href="#truncate-截断文件" class="headerlink" title="truncate(截断文件)"></a>truncate(截断文件)</h3><blockquote><p>截断文件，将文件截断为指定长度<br>    fs.truncate(path[, len], callback)<br>    fs.truncateSync(path[, len])</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.truncateSync('02-1.txt',10)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mkdir、rmdir"><a href="#mkdir、rmdir" class="headerlink" title="mkdir、rmdir"></a>mkdir、rmdir</h3><blockquote><p>创建一个目录<br>    fs.mkdir(path[, options], callback)<br>    fs.mkdirSync(path[, options])<br>            options:<br>                    recursive:指示是否要创建父目录 默认false;如果不使用这个参数创建一个已经存在的目录会报错<br><br>    删除一个目录<br>    fs.rmdir(path[, options], callback)<br>    fs.rmdirSync(path[, options])</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.mkdirSync('./目录11')</span><span class="token comment" spellcheck="true">// fs.mkdir('./目录1/目录2/目录3', { recursive: true }, (err) => {</span><span class="token comment" spellcheck="true">//   if (err) throw err;</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">// fs.rmdirSync('./目录11')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h3><blockquote><p>把 oldPath 文件重命名为 newPath 提供的路径名; 可移动文件<br>  fs.rename(oldPath, newPath, callback)<br>  fs.renameSync(oldPath, newPath)</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.renameSync('01-1.txt', './目录1/a.txt')</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="watchFile"><a href="#watchFile" class="headerlink" title="watchFile"></a>watchFile</h3><blockquote><p>监视文件的修改，每当访问文件时都会调用 listener 回调。<br>  fs.watchFile(filename[, options], listener)<br>  options对象：<br>          interval 属性，指示轮询目标的频率（以毫秒为单位）<br>  listener回调的两个参数：(两个参数都是stats对象)<br>          curr：当前文件状态<br>          prev：修改前文件状态</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fs.watchFile('hello.txt',{interval:1000}, function(curr,prev){</span><span class="token comment" spellcheck="true">//     console.log(curr.size,prev.size)</span><span class="token comment" spellcheck="true">// })</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><blockquote><p>判断服务器上有没有upload目录，如果没有的话创建这个目录，如果有的话不去操作</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">'./upload'</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>stats<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断有没有upload文件</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果没有upload文件直接创建文件夹</span>    <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果有upload文件，且不是文件夹，就删除upload文件，再创建文件夹</span>      fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>unlinkErr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>unlinkErr<span class="token punctuation">)</span> <span class="token keyword">throw</span> unlinkErr<span class="token punctuation">;</span>        <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>  fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'创建目录成功'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><blockquote><p>wwwroot文件夹下有images css js 以及index.html，找出wwwroot中所有的文件夹，并放到一个数组中</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token string">'./wwwroot'</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 找出wwwroot中的所有文件</span><span class="token comment" spellcheck="true">// fs.readdir('./wwwroot',function(err,files){</span><span class="token comment" spellcheck="true">//   if(err) throw err;</span><span class="token comment" spellcheck="true">//   files.forEach(v=>{</span><span class="token comment" spellcheck="true">//     fs.stat('./wwwroot/'+v,function(statErr,data){</span><span class="token comment" spellcheck="true">//       if(statErr) throw statErr;</span><span class="token comment" spellcheck="true">//       console.log(v,data.isDirectory())</span><span class="token comment" spellcheck="true">//       if( data.isDirectory() ){</span><span class="token comment" spellcheck="true">//         arr.push(v)</span><span class="token comment" spellcheck="true">//       }</span><span class="token comment" spellcheck="true">//       console.log(arr)</span><span class="token comment" spellcheck="true">//     })</span><span class="token comment" spellcheck="true">//   })</span><span class="token comment" spellcheck="true">//   console.log(arr)  // 返回空数组。原因：arr.push在stat的回调里面，执行顺序是在log arr后再执行arr.push</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// 正确写法1：使用递归的方法</span><span class="token comment" spellcheck="true">// fs.readdir(path,(err,data)=>{</span><span class="token comment" spellcheck="true">//   if(err){</span><span class="token comment" spellcheck="true">//     console.log(err);</span><span class="token comment" spellcheck="true">//     return</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">//   (function getDir(i){</span><span class="token comment" spellcheck="true">//     if(i == data.length){</span><span class="token comment" spellcheck="true">//       console.log(arr);</span><span class="token comment" spellcheck="true">//       return;</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">//     fs.stat(path+'/'+data[i],(error,stats)=>{</span><span class="token comment" spellcheck="true">//       if( stats.isDirectory() ){</span><span class="token comment" spellcheck="true">//         arr.push(data[i])</span><span class="token comment" spellcheck="true">//       }</span><span class="token comment" spellcheck="true">//       getDir(i+1)</span><span class="token comment" spellcheck="true">//     })</span><span class="token comment" spellcheck="true">//   })(0)</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// 正确写法2：async await</span><span class="token comment" spellcheck="true">// 1、定义一个异步方法判断是否是文件夹</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">isDir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>stats<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span> stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2、遍历目录</span>fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> dir <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">isDir</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> dir <span class="token punctuation">)</span><span class="token punctuation">{</span>      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> fs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3</title>
      <link href="2021/05/14/vue3/"/>
      <url>2021/05/14/vue3/</url>
      
        <content type="html"><![CDATA[<h2 id="vue2-0和vue3-0的区别"><a href="#vue2-0和vue3-0的区别" class="headerlink" title="vue2.0和vue3.0的区别"></a>vue2.0和vue3.0的区别</h2><ol><li>打包方式：<br>2.0是通过:npm run dev<br>3.0是：npm run serve<br>至于为什么会变，来看一下package.json</li><li>文件夹目录：<br>3.0取消掉了config目录、build目录、static目录  ,还有最重要的一点，3.0的安装项目时自动下载node-model<br>vue.config.js也没了，需要手动添加。</li><li>创建项目方式：<br>3.0的安装：vue create 3.0project；<br>2.0的安装：vue init webpack(据我所知有五个，这个是我常用的)  2.0project(项目名)</li></ol><h2 id="vue-create-3-0project"><a href="#vue-create-3-0project" class="headerlink" title="vue create 3.0project"></a>vue create 3.0project</h2><pre><code> ◉ Choose Vue version ◉ Babel ◉ TypeScript ◯ Progressive Web App (PWA) Support ◉ Router ◉ Vuex ◉ CSS Pre-processors ◉ Linter / Formatter ◉ Unit Testing❯◯ E2E Testing</code></pre><p>Progressive Web App (PWA) Support PWA 支持。</p><p>CSS Pre-processors 支持 CSS 预处理器。</p><p>Linter / Formatter 支持代码风格检查和格式化。</p><p>Unit Testing 支持单元测试。</p><p>E2E Testing 支持 E2E 测试。</p><h2 id="vue-3-0-的-404-路由配置"><a href="#vue-3-0-的-404-路由配置" class="headerlink" title="vue 3.0 的 404 路由配置"></a>vue 3.0 的 404 路由配置</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">"/:catchAll(.*)"</span><span class="token punctuation">,</span>  name<span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span> <span class="token string">"../views/404.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中组件传参</title>
      <link href="2021/05/13/vue-components/"/>
      <url>2021/05/13/vue-components/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-的父子组件生命周期钩子函数执行顺序"><a href="#Vue-的父子组件生命周期钩子函数执行顺序" class="headerlink" title="Vue 的父子组件生命周期钩子函数执行顺序"></a>Vue 的父子组件生命周期钩子函数执行顺序</h2><ul><li>加载渲染过程</li></ul><p>父 beforeCreate-&gt;父 created-&gt;父 beforeMount-&gt;子 beforeCreate-&gt;子 created-&gt;子 beforeMount-&gt;子 mounted-&gt;父 mounted</p><ul><li>子组件更新过程</li></ul><p>父 beforeUpdate-&gt;子 beforeUpdate-&gt;子 updated-&gt;父 updated</p><ul><li>父组件更新过程</li></ul><p>父 beforeUpdate-&gt;父 updated</p><ul><li>销毁过程</li></ul><p>父 beforeDestroy-&gt;子 beforeDestroy-&gt;子 destroyed-&gt;父 destroyed</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> components </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty()的参数及使用</title>
      <link href="2021/04/27/defineProperty/"/>
      <url>2021/04/27/defineProperty/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>Object.defineProperty(obj, attr, descriptor)</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>obj : 对象<br>attr : 要定义或编辑的对象属性名<br>descriptor : 对象类型，要定义或修改属性的描述</p><h4 id="descriptor描述分类"><a href="#descriptor描述分类" class="headerlink" title="descriptor描述分类"></a>descriptor描述分类</h4><ul><li>数据描述符 &amp; 存取描述符 特性<ul><li>configurable: 是否可以重新定义 默认false</li><li>enumerable: 是否可枚举 默认false</li><li>value: 属性初始值 默认 undefined</li><li>writable: 是否可以修改属性值，默认false</li></ul></li><li>存取描述符 特性<ul><li>get: 回调函数，根据其他属性动态计算得到当前属性值。默认为 undefined。</li><li>set: 回调函数，监视当前属性值的变化，更新其他相关的属性值。默认为 undefined。</li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">'A'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'fullName'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// A-B </span>obj<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">"C"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token string">"D"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// C-D</span>obj<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">"E-F"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// E F</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">'fullName2'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    configurable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span><span class="token string">'G-H'</span><span class="token punctuation">,</span>    writable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// G-H</span>obj<span class="token punctuation">.</span>fullName2 <span class="token operator">=</span> <span class="token string">"J-K"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>fullName2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// G-H    // writable:false不可修改</span><span class="token comment" spellcheck="true">// Object.defineProperty(obj,'fullName2',{    // typeError cannot redefine property:fullName2 // configurable:false, 不可重新定义</span><span class="token comment" spellcheck="true">//     configurable:false,</span><span class="token comment" spellcheck="true">//     enumerable:true,</span><span class="token comment" spellcheck="true">//     value:'J-K',</span><span class="token comment" spellcheck="true">//     writable:false</span><span class="token comment" spellcheck="true">// })</span><span class="token comment" spellcheck="true">// Object.keys 可得到属性自身可枚举属性的属性名</span><span class="token keyword">let</span> names <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ["firstName","lastName","fullName2"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式中(?:pattern)、(?=pattern)、(?!pattern)、(?&lt;=pattern)和(?&lt;!pattern)</title>
      <link href="2021/04/25/jsRegExp01/"/>
      <url>2021/04/25/jsRegExp01/</url>
      
        <content type="html"><![CDATA[<h3 id="pattern"><a href="#pattern" class="headerlink" title="(?:pattern)"></a>(?:pattern)</h3><p>()表示捕获分组，()会把每个分组里的匹配的值保存起来，从左向右，以分组的左括号为标志，第一个出现的分组的组号为 1，第二个为 2，以此类推</p><p>(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来</p><p><img src="./jsRegExp01.png" alt="代码"><br>可以看到 (?:[0-9]<em>) 匹配的第一个 [0-9]</em> 没有保存下来，即没有保存匹配到的“123”，而([0-9]*)则保存了下来。</p><p>(?:pattern)在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如，’industr(?:y|ies)’ 就是一个比 ‘industry|industries’ 更简略的表达式。因为我们单独存储下 “y” 或者 “ies” 没有什么意义</p><h3 id="pattern-1"><a href="#pattern-1" class="headerlink" title="(?=pattern)"></a>(?=pattern)</h3><p>正向肯定预查，匹配 pattern 前面的位置。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</p><p>简单说，以 xxx(?=pattern)为例，就是捕获以 pattern 结尾的内容 xxx</p><p>例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p><h3 id="pattern-2"><a href="#pattern-2" class="headerlink" title="(?!pattern)"></a>(?!pattern)</h3><p>正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</p><p>简单说，以 xxx(?!pattern)为例，就是捕获不以 pattern 结尾的内容 xxx</p><p>例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p><h3 id="lt-pattern"><a href="#lt-pattern" class="headerlink" title="(?&lt;=pattern)"></a>(?&lt;=pattern)</h3><p>反向肯定预查，与正向肯定预查类似，只是方向相反。</p><p>简单说，以(?&lt;=pattern)xxx 为例，就是捕获以 pattern 开头的内容 xxx。</p><p>例如，”(?&lt;=95|98|NT|2000)Windows”能匹配”2000Windows”中的”Windows”，但不能匹配”3.1Windows”中的”Windows”。</p><h3 id="lt-！pattern"><a href="#lt-！pattern" class="headerlink" title="(?&lt;！pattern)"></a>(?&lt;！pattern)</h3><p>简单说，以(?&lt;!pattern)xxx 为例，就是捕获不以 pattern 开头的内容 xxx。</p><p>反向否定预查，与正向否定预查类似，只是方向相反。例如”(?&lt;!95|98|NT|2000)Windows”能匹配”3.1Windows”中的”Windows”，但不能匹配”2000Windows”中的”Windows”。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>source-map</title>
      <link href="2020/12/10/webpack-source-map/"/>
      <url>2020/12/10/webpack-source-map/</url>
      
        <content type="html"><![CDATA[<pre><code>devtool:source-mapdevtool:[inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</code></pre><p><strong>参数详解：</strong></p><ul><li><code>source-map</code>：外部<br>错误代码准确信息 和 源代码的错误位置</li><li><code>inline-source-map</code>：内联<br>只生成一个内联 source-map<br>错误代码准确信息 和 源代码的错误位置</li><li><code>hidden-source-map</code>：外部<br>错误代码错误原因，但是没有错误位置<br>不能追踪源代码错误，只能提示到构建后代码的错误位置</li><li><code>eval-source-map</code>：内联<br>每一个文件都生成对应的 source-map,都在 eval<br>错误代码准确信息 和 源代码的错误位置</li><li><code>nosources-source-map</code>：外部<br>错误代码准确信息，但是没有任何源代码信息</li><li><code>cheap-source-map</code>：外部<br>错误代码准确信息 和 源代码的错误位置<br>只能精确到行</li><li><code>cheap-module-source-map</code>：外部<br>错误代码准确信息 和 源代码的错误位置<br>module 会将 loader 的 source map 加入</li></ul><h2 id="内联和外部的区别：1-外部生成了文件，内联没有-2-内联构建速度更快"><a href="#内联和外部的区别：1-外部生成了文件，内联没有-2-内联构建速度更快" class="headerlink" title="内联和外部的区别：1.外部生成了文件，内联没有 2.内联构建速度更快"></a>内联和外部的区别：1.外部生成了文件，内联没有 2.内联构建速度更快</h2><h3 id="开发环境：速度快，调度更友好"><a href="#开发环境：速度快，调度更友好" class="headerlink" title="开发环境：速度快，调度更友好"></a>开发环境：速度快，调度更友好</h3><ol><li>速度快(eval&gt;inline&gt;cheap&gt;…)</li></ol><ul><li>eval-cheap-source-map</li><li>eval-source-map</li></ul><ol start="2"><li>调度更友好</li></ol><ul><li>source-map</li><li>cheap-module-source-map</li><li>cheap-souce-map<br>–&gt; eval-source-map / eval-cheap-module-source-map</li></ul><h3 id="生产环境：源代码要不要隐藏？调度要不要更友好"><a href="#生产环境：源代码要不要隐藏？调度要不要更友好" class="headerlink" title="生产环境：源代码要不要隐藏？调度要不要更友好"></a>生产环境：源代码要不要隐藏？调度要不要更友好</h3><p>内联会让代码体积变大，所以在生产环境不用内联<br>nosources-source-map 全部隐藏<br>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息<br>–&gt; source-map / cheap-module-source-map</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> source-map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一些小技巧</title>
      <link href="2020/12/09/tips/"/>
      <url>2020/12/09/tips/</url>
      
        <content type="html"><![CDATA[<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="页面-v-for-中修改-item-属性值后页面-v-if-不改变的问题"><a href="#页面-v-for-中修改-item-属性值后页面-v-if-不改变的问题" class="headerlink" title="页面 v-for 中修改 item 属性值后页面 v-if 不改变的问题"></a>页面 v-for 中修改 item 属性值后页面 v-if 不改变的问题</h3><p>添加 this.$forceUpdate();进行强制渲染，效果实现</p><h3 id="vue-cli-显示-webpack-配置文件命令："><a href="#vue-cli-显示-webpack-配置文件命令：" class="headerlink" title="vue-cli 显示 webpack 配置文件命令："></a>vue-cli 显示 webpack 配置文件命令：</h3><pre><code>vue inspect --mode=development &gt; webpack.dev.jsvue inspect --mode=production &gt; webpack.prod.js</code></pre><h3 id="vue-不兼容ie哪个浏览器？"><a href="#vue-不兼容ie哪个浏览器？" class="headerlink" title="vue 不兼容ie哪个浏览器？"></a>vue 不兼容ie哪个浏览器？</h3><blockquote><p>vue 不兼容ie8，因为在vue中的数据绑定、数组代理使用的defineProperty是es5的语法，不支持ie8</p></blockquote><hr><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><blockquote><p>–hard : 回退版本库，暂存区，工作区。（因此我们修改过的代码在本地就没了）<br><br>–mixed: 回退版本库，暂存区。(–mixed 为 git reset 的默认参数，即当任何参数都不加的时候的参数)<br><br>–soft: 回退版本库。</p></blockquote><hr><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="Math-round-ceil-floor"><a href="#Math-round-ceil-floor" class="headerlink" title="Math.round/ceil/floor"></a>Math.round/ceil/floor</h3><pre class="line-numbers language-javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 四舍五入</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向上取整</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向下取整</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p><a href="/2020/12/01/js-promise/">promise</a></p><hr><h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><h3 id="安卓手机文本框获取焦点后，键盘把文本框挡住了"><a href="#安卓手机文本框获取焦点后，键盘把文本框挡住了" class="headerlink" title="安卓手机文本框获取焦点后，键盘把文本框挡住了"></a>安卓手机文本框获取焦点后，键盘把文本框挡住了</h3><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>        document<span class="token punctuation">.</span>activeElement<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"INPUT"</span> <span class="token operator">||</span>        document<span class="token punctuation">.</span>activeElement<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"TEXTAREA"</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"scrollIntoView"</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span>activeElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>activeElement<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>activeElement<span class="token punctuation">.</span><span class="token function">scrollIntoViewIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iphone-x-高度-100-兼容设置"><a href="#iphone-x-高度-100-兼容设置" class="headerlink" title="iphone x 高度:100%; 兼容设置"></a>iphone x 高度:100%; 兼容设置</h3><ol><li>html 代码里面添加 viewport-fit=cover ，这个 ios11 的新属性可以使得页面内容完全覆盖可视窗口<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, viewport-fit<span class="token punctuation">=</span>cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将页面主体设置在安全区域内<br>这一步视实际场景而定，可以不设置，带来的影响就是会出现底部区域的内容会被挡住；<br>env() 和 constant()是IOS11新增的css函数，有四个预定义的变量safe-area-inset-bottom、safe-area-inset-top、safe-area-inset-left、safe-area-inset-right，分别是安全区域到各边界的距离，此时我们只需要关心afe-area-inset-bottom(横竖屏的情况下是不一样的)。对于不支持这两个属性的情况，浏览器会忽略。<br>注意，constant()在IOS11.2之后是不可使用的，因此要向后兼容，即env()，且二者位置不可调换；<br>constant(): 兼容IOS &lt; 11.2<br>env(): 兼容IOS &gt;= 11.2<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span> <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">env</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>设置目标元素(fixed)的高度<br>对于目标元素，可设置bottom、padding-bottom、margin-bottom 均可：<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.fixed</span> </span><span class="token punctuation">{</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">constant</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token function">env</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>或者新增一个height = constant(safe-area-inset-bottom)空白区块亦可，方案多样。</li></ul><blockquote><p>别忘了使用 @supports<br>一般我们只希望 iPhoneX 才需要新增适配样式，我们可以配合 @supports 这样编写样式：</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">@ supports (bottom: env(safe-area-inset-bottom)) </span><span class="token punctuation">{</span>    <span class="token selector">div </span><span class="token punctuation">{</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span>  <span class="token function">env</span><span class="token punctuation">(</span>safe-area-inset-bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="浏览器是60Hz的刷新率，每16ms才会更新一次"><a href="#浏览器是60Hz的刷新率，每16ms才会更新一次" class="headerlink" title="浏览器是60Hz的刷新率，每16ms才会更新一次"></a>浏览器是<code>60Hz</code>的刷新率，每<code>16ms</code>才会更新一次</h3><hr><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ol><li>vue key 作用 diff 算法</li><li>vue 组件传参</li><li><a href="/2020/12/01/js-promise/">实现 promise.allsettled</a></li><li>css 垂直水平居中</li><li>webpack 相关</li><li>闭包</li><li><a href="/2020/11/16/js原型/">原型链</a></li><li><a href="/2020/12/02/commonjs-es6Module/">commonjs 和 es6 模块的区别</a></li><li>浏览器缓存</li><li>首屏加载</li><li>新需求下来，要做哪些准备</li><li>babel webpack</li><li>webpack 的 plugin 跟 loader</li></ol><hr><h2 id="vscode-插件"><a href="#vscode-插件" class="headerlink" title="vscode 插件"></a>vscode 插件</h2><ul><li><code>Npm Intellisense</code> 可自动完成导入语句中的 npm 模块</li><li><code>Better Comments</code> 丰富注释颜色，让注释也具有生命力，如需自定义样式，需要写入配置代码</li><li><code>Partial Diff</code> 文本对比工具，右击使用</li></ul><hr><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="LRU-算法是什么"><a href="#LRU-算法是什么" class="headerlink" title="LRU 算法是什么"></a>LRU 算法是什么</h3><p><img src="./lru.png" alt="LRU算法"><br>LRU 的核心思想是如果数据最近被访问过，那么将来被访问的几率也更高，所以我们将命中缓存的组件 key 重新插入到 this.keys 的尾部，这样一来，this.keys 中越往头部的数据即将来被访问几率越低，所以当缓存数量达到最大值时，我们就删除将来被访问几率最低的数据，即 this.keys 中第一个缓存的组件。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存-未完成</title>
      <link href="2020/12/09/%E7%BC%93%E5%AD%98/"/>
      <url>2020/12/09/%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度。</p></blockquote><blockquote><p>通常浏览器缓存策略分为两种：强缓存和协商缓存。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-promise</title>
      <link href="2020/12/09/js-promise/"/>
      <url>2020/12/09/js-promise/</url>
      
        <content type="html"><![CDATA[<h2 id="promise-执行顺序"><a href="#promise-执行顺序" class="headerlink" title="promise 执行顺序"></a>promise 执行顺序</h2><ul><li>resolve() 后面的也是同步任务，跟 resolve 前面的同步执行。</li><li>return resolve() 后面的内容不执行。</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hi!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Promise</span><span class="token comment" spellcheck="true">// Hi!</span><span class="token comment" spellcheck="true">// resolved</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reject-后执行"><a href="#reject-后执行" class="headerlink" title="reject()后执行"></a>reject()后执行</h2><blockquote><p>一般总是建议，Promise 对象后面要跟 catch()方法，这样可以处理 Promise 内部发生的错误。catch()方法返回的还是一个 Promise 对象，因此后面还可以接着调用 then()方法</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Promise</span><span class="token comment" spellcheck="true">// err</span>promise  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Promise</span><span class="token comment" spellcheck="true">// err</span><span class="token comment" spellcheck="true">// resolved</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="resolve-函数和-reject-函数时带有参数"><a href="#resolve-函数和-reject-函数时带有参数" class="headerlink" title="resolve 函数和 reject 函数时带有参数"></a>resolve 函数和 reject 函数时带有参数</h2><p>如果调用 resolve 函数和 reject 函数时带有参数，那么它们的参数会被传递给回调函数。reject 函数的参数通常是 Error 对象的实例，表示抛出的错误；resolve 函数的参数除了正常的值以外，还可能是另一个 Promise 实例，比如像下面这样。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 3 1 4 Error: fail "e"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时 p1 的状态就会传递给 p2，也就是说，p1 的状态决定了 p2 的状态。如果 p1 的状态是 pending，那么 p2 的回调函数就会等待 p1 的状态改变；如果 p1 的状态已经是 resolved 或者 rejected，那么 p2 的回调函数将会立刻执行</p><h2 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h2><blockquote><p>finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，不管 promise 最后的状态，在执行完 then 或 catch 指定的回调函数以后，都会执行 finally 方法指定的回调函数</p><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><blockquote><p>如果作为参数的 Promise 实例，自己定义了 catch 方法，那么它一旦被 rejected，并不会触发 Promise.all()的 catch 方法。<br>const p = Promise.all([p1, p2, p3]);</p></blockquote><p><strong>all</strong></p><ul><li>只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</li><li>只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</li></ul><pre><code>const p1 = new Promise((resolve, reject) =&gt; {  resolve(&#39;hello&#39;);}).then(result =&gt; result).catch(e =&gt; e);const p2 = new Promise((resolve, reject) =&gt; {  throw new Error(&#39;报错了&#39;);}).then(result =&gt; result).catch(e =&gt; e);Promise.all([p1, p2]).then(result =&gt; console.log(result)).catch(e =&gt; console.log(e));// [&quot;hello&quot;, Error: 报错了]</code></pre><p>上面代码中，p1 会 resolved，p2 首先会 rejected，但是 p2 有自己的 catch 方法，该方法返回的是一个新的 Promise 实例，p2 指向的实际上是这个实例。该实例执行完 catch 方法后，也会变成 resolved，导致 Promise.all()方法参数里面的两个实例都会 resolved，因此会调用 then 方法指定的回调函数，而不会调用 catch 方法指定的回调函数。</p><p>如果 p2 没有自己的 catch 方法，就会调用 Promise.all()的 catch 方法。</p><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>const p = Promise.race([p1, p2, p3]);<br><strong>race</strong></p><ul><li>只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。</li><li>那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数</li></ul><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h2><blockquote><p>Promise.allSettled()方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例。只有等到所有这些参数实例都返回结果，不管是 fulfilled 还是 rejected，包装实例才会结束。该方法由 ES2020 引入。</p></blockquote><blockquote><p>该方法返回的新的 Promise 实例，一旦结束，状态总是 fulfilled，不会变成 rejected。状态变成 fulfilled 后，Promise 的监听函数接收到的参数是一个数组，每个成员对应一个传入 Promise.allSettled()的 Promise 实例。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> resolved <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> rejected <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> allSettledPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>resolved<span class="token punctuation">,</span> rejected<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>allSettledPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [</span><span class="token comment" spellcheck="true">//    { status: 'fulfilled', value: 42 },</span><span class="token comment" spellcheck="true">//    { status: 'rejected', reason: -1 }</span><span class="token comment" spellcheck="true">// ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候，我们不关心异步操作的结果，只关心这些操作有没有结束<br>下面是返回值用法的例子。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://does-not-exist/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 过滤出成功的请求</span><span class="token keyword">const</span> successfulPromises <span class="token operator">=</span> results<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"fulfilled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 过滤出失败的请求，并输出原因</span><span class="token keyword">const</span> errors <span class="token operator">=</span> results  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> p<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h2><blockquote><p>ES2021 引入了 Promise.any()方法。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态。</p></blockquote><h2 id="实现-Promise-完整代码"><a href="#实现-Promise-完整代码" class="headerlink" title="实现 Promise 完整代码"></a>实现 Promise 完整代码</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fulfilledQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">=</span> PENDING<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> handleFulfilledQueue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fulfilledQueue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> fulfiledFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fulfilledQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fulfiledFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> handleRejectedQueue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> rejectedFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rejectedFn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 完成状态转变，执行回调队列中的回调函数</span>    <span class="token keyword">const</span> _resolve <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">!==</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          val<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">=</span> FULFILLED<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> res<span class="token punctuation">;</span>              <span class="token function">handleFulfilledQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> err<span class="token punctuation">;</span>              <span class="token function">handleRejectedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">=</span> FULFILLED<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> val<span class="token punctuation">;</span>          <span class="token function">handleFulfilledQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 完成状态Pending到REJECTED的转变，执行rejected队列中的回调函数</span>    <span class="token keyword">const</span> _reject <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">!==</span> PENDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_status <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token function">handleRejectedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理外部传入函数执行异常</span>      <span class="token function">fn</span><span class="token punctuation">(</span>_resolve<span class="token punctuation">,</span> _reject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">_reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">then</span><span class="token punctuation">(</span>successFn<span class="token punctuation">,</span> failFn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行成功时的回调函数</span>      <span class="token keyword">const</span> handleSucess <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 执行失败时的回调函数</span>      <span class="token keyword">const</span> handleFail <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fn <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> PENDING<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 异步任务尚未完成，将回调函数推入相应队列</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fulfilledQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">handleSucess</span><span class="token punctuation">(</span>successFn<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">handleFail</span><span class="token punctuation">(</span>failFn<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> FULFILLED<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 异步任务成功完成，执行成功回调函数</span>          <span class="token function">handleSucess</span><span class="token punctuation">(</span>successFn<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> REJECTED<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 异步任务已失败，执行失败回调函数</span>          <span class="token function">handleFail</span><span class="token punctuation">(</span>failFn<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise error status:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_status<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>failFn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> failFn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">finally</span><span class="token punctuation">(</span>finalFn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>finalFn<span class="token punctuation">,</span> finalFn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> len <span class="token operator">=</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        promiseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span>push<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> len <span class="token operator">=</span> promiseArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        promiseArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">allSettled</span><span class="token punctuation">(</span>allPromise<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> settled <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> len <span class="token operator">=</span> allPromise<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        allPromise<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> status<span class="token punctuation">:</span> <span class="token string">"fulfilled"</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> res <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> status<span class="token punctuation">:</span> <span class="token string">"rejected"</span><span class="token punctuation">,</span> reason<span class="token punctuation">:</span> err <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token operator">++</span>settled <span class="token operator">===</span> len <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>commonjs跟es6模块有什么区别</title>
      <link href="2020/12/09/commonjs-es6Module/"/>
      <url>2020/12/09/commonjs-es6Module/</url>
      
        <content type="html"><![CDATA[<blockquote><p>历史上，js一直没有模块(module)体系，无法将一个项目拆分成多个模块文件。正对这一情况，社区出现了一些统一的规范：CommonJs和AMD，前者是针对服务端的js，也就是nodejs。后者是针对浏览器的。ES6在语言标准层面上，实现了模块功能，而且实现也比较简单。完全可以取代CommonJs和AMD。达成前后端js的模块风格统一。不过目前还未完全达到这一目的。nodejs目前主流还是采用CommonJS规范。不过在v13.2版本，nodejs已经实现了ES6模块语法，还未正式替换，在考察阶段。v13.2版本将js文件以 .mjs结尾，nodejs将它视为ES6模块。以 .cjs结尾则视为CommonJS模块。也可以在包的package.json文件中增加 “type”: “module”信息。nodejs则将整个包都视为ES6模块来加载运行。</p></blockquote><ul><li>CommonJS与ES6 Module最本质的区别在于CommonJS对模块依赖的解决是“动态的”而ES6 Module是“静态的”；</li><li>即commonjs是运行时加载模块，ES6是在静态编译期间就确定模块的依赖；</li><li>ES6在编译期间会将所有import提升到顶部，commonjs不会提升require；</li><li>两者的模块导入导出语法不同，commonjs是module.exports，exports导出，require导入；ES6则是export导出，import导入；</li><li>commonjs导出的是一个值拷贝，会对加载结果进行缓存，一旦内部再修改这个值，则不会同步到外部。ES6是导出的一个引用，内部修改可以同步到外部；</li><li>commonjs中顶层的this指向这个模块本身，而ES6中顶层this指向undefined。</li><li>然后就是commonjs中的一些顶层变量在ES6中不再存在：<pre><code>argumentsrequiremoduleexports__filename__dirname</code></pre></li></ul><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><ol><li>对于基本数据类型，属于复制。即会被模块缓存。同时，在另一个模块可以对该模块输出的变量重新赋值。</li><li>对于复杂数据类型，属于浅拷贝。由于两个模块引用的对象指向同一个内存空间，因此对该模块的值做修改时会影响另一个模块。</li><li>当使用require命令加载某个模块时，就会运行整个模块的代码。</li><li>当使用require命令加载同一个模块时，不会再执行该模块，而是取到缓存之中的值。也就是说，CommonJS模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</li><li>循环加载时，属于加载时执行。即脚本代码在require的时候，就会全部执行。一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。<h2 id="ES6模块"><a href="#ES6模块" class="headerlink" title="ES6模块"></a>ES6模块</h2></li><li>ES6模块中的值属于【动态只读引用】。</li><li>对于只读来说，即不允许修改引入变量的值，import的变量是只读的，不论是基本数据类型还是复杂数据类型。当模块遇到import命令时，就会生成一个只读引用。等到脚 本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</li><li>对于动态来说，原始值发生变化，import加载的值也会发生变化。不论是基本数据类型还是复杂数据类型。</li><li>循环加载时，ES6模块是动态引用。只要两个模块之间存在某个引用，代码就能够执行。</li></ol><p>CommonJs模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化不会影响到这个值</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// common.js</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> printCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  printCount<span class="token punctuation">:</span> printCount<span class="token punctuation">,</span>  count<span class="token punctuation">:</span> count<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">printCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明明common.js里面改变了count，但是输出的结果还是原来的。这是因为count是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动的值。将common.js里面的module.exports 改写成</p><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>     printCount<span class="token punctuation">:</span> printCount<span class="token punctuation">,</span>     <span class="token keyword">get</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> count     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样子的输出结果是 1，2，2</p><p>而在ES6当中，写法是这样的，是利用export 和import导入的</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// es6.js</span><span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span>  <span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main1.js</span><span class="token keyword">import</span>  <span class="token punctuation">{</span> count<span class="token punctuation">,</span> printCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./es6'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 2 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// export default</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">printCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span>  <span class="token operator">++</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> printCount<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main3.js</span><span class="token keyword">import</span> res form <span class="token string">'./main3.js'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> commonJs </tag>
            
            <tag> es6 Module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型、原型链</title>
      <link href="2020/12/09/js%E5%8E%9F%E5%9E%8B/"/>
      <url>2020/12/09/js%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>js分为<strong>函数对象</strong>跟<strong>普通对象</strong>，每个对象都有<code>__proto__</code>属性，但只有函数对象才能<code>prototype</code>属性。</p></li><li><p>Object、Function都是js内置的函数，类似的还有我们常用到的Array、RegExp、Date、Boolean、Number、String。</p></li><li><p>属性<strong>proto</strong>是一个对象，它有两个属性，constructor和<strong>proto</strong>。</p></li><li><p>原型对象prototype有一个默认的constructor属性，用于记录实例是由哪个构造函数创建。</p></li></ul><p><img src="./js-prototype-01.jpeg" alt="js原型、原型链"></p><blockquote><p>除了Object的原型对象（Object.prototype）的<strong>proto</strong>指向null，其他内置函数对象的原型对象（例如：Array.prototype）和自定义构造函数的<br><strong>proto</strong>都指向Object.prototype, 因为原型对象本身是普通对象。<br>即：</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__  <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="准则"><a href="#准则" class="headerlink" title="准则"></a>准则</h2><ol><li>Person.prototype.constructor == Person<br>// <strong>准则1：原型对象（即Person.prototype）的constructor指向构造函数本身</strong></li><li>person01.<strong>proto</strong> == Person.prototype<br>// <strong>准则2：实例（即person01）的<strong>proto</strong>和原型对象指向同一个地方</strong></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript">Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 准则2</span>Object<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Function<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// 准则2 (Object本质也是函数)；</span>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Function<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// 准则2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Function<span class="token punctuation">.</span>prototypeFoo<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Object<span class="token punctuation">.</span>prototype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><h3 id="测试题1"><a href="#测试题1" class="headerlink" title="测试题1"></a>测试题1</h3><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  A<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  A<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>      n<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>      m<span class="token punctuation">:</span><span class="token number">3</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">,</span>b<span class="token punctuation">.</span>m<span class="token punctuation">,</span>c<span class="token punctuation">.</span>n<span class="token punctuation">,</span>c<span class="token punctuation">.</span>m<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1 undefined 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A.prototype = {}是重写原型，<strong>重写后跟重写前就已经实例化的对象没有关系的</strong>，所以n=2,m=3不生效。若要有效,添加以下代码<code>b.__proto__.m=4</code></p><h3 id="测试题2"><a href="#测试题2" class="headerlink" title="测试题2"></a>测试题2</h3><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> F<span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a()'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b()'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> f<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  f<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a()</span>  f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//无法执行b函数，报错</span>  F<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a()</span>  F<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//b()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./js-prototype-02.png" alt="分析"></p><h3 id="测试题3"><a href="#测试题3" class="headerlink" title="测试题3"></a>测试题3</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>User<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>sayHello <span class="token operator">===</span> u2<span class="token punctuation">.</span>sayHello<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// t</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//User</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>prototype <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//f</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//t</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>__proto__<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//f-t</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> u2<span class="token punctuation">.</span>__proto__<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//t</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> User<span class="token punctuation">.</span>__proto__<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//f</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>__proto__<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f-t</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//f</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//t</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>constructor <span class="token operator">==</span> User <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong><br>User.<strong>proto</strong> == Function.prototype<br>Function.<strong>proto</strong> == Function.prototype<br>Object.<strong>proto</strong> == Function.prototype</p><p>u1.<strong>proto</strong> == User.prototype<br>User.prototype.<strong>proto</strong> == Object.prototype<br>User.prototype.constructor == User</p><h3 id="测试题4"><a href="#测试题4" class="headerlink" title="测试题4"></a>测试题4</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">C</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span>A<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>B<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>C<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>console.log(new A().a);　　//new A()为构造函数创建的对象，本身没有a属性，所以向它的原型去找，发现原型的a属性的属性值为1，故该输出值为1；</p><p>console.log(new B().a);　　//new B()为构造函数创建的对象，该构造函数有参数a，但该对象没有传参，故该输出值为undefined;</p><p>console.log(new C(2).a);　　//new C()为构造函数创建的对象，该构造函数有参数a，且传的实参为2，执行函数内部，发现if为真，执行this.a = 2,故属性a的值为2；</p><p>故这三个的输出值分别为：1、undefined、2</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js原型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中mixins的理解及使用</title>
      <link href="2020/12/09/vue-mixins/"/>
      <url>2020/12/09/vue-mixins/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-中-mixin-和-mixins-的区别"><a href="#Vue-中-mixin-和-mixins-的区别" class="headerlink" title="Vue 中 mixin 和 mixins 的区别"></a>Vue 中 mixin 和 mixins 的区别</h2><blockquote><p>mixin 用于全局注册一个混入，如果有公共的组件使用频率很高的话，可以使用 mixin 很方便的引入公共的部分 mixins 选项接受一个混入对象的数组<br>mixins 在引入组件之后，则是将组件内部的内容如 data 属性，methods 方法与父组件的内容相对应进行合并，可以对父组件的属性进行扩充，mixins 混入的钩子函数会优先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并。</p></blockquote><h2 id="vue-的-extends-和-mixins-的区别"><a href="#vue-的-extends-和-mixins-的区别" class="headerlink" title="vue 的 extends 和 mixins 的区别"></a>vue 的 extends 和 mixins 的区别</h2><blockquote><p>vue 的 extends 和 mixins 类似，通过暴露一个 extends 对象到组件中使用。</p></blockquote><blockquote><p>extends 会比 mixins 先执行； <a href="#item1">执行顺序</a>：extends &gt; mixins[引用的先后顺序] &gt; 组件</p></blockquote><blockquote><p>extends 只能暴露一个 extends 对象，暴露多个 extends 不会执行</p></blockquote><h3 id="Vue-mixin-示例："><a href="#Vue-mixin-示例：" class="headerlink" title="Vue.mixin()示例："></a>Vue.mixin()示例：</h3><p><strong>先定义 mixin.js</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mixins <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      globalName<span class="token punctuation">:</span> <span class="token string">"这是全局名称"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'name'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">two</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num <span class="token operator">*</span> num    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> defaullt mixins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在 main.js 文件全局引入</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> mixin <span class="token keyword">from</span> <span class="token string">'./mixin'</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>mixin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>其他 vue 页面里面就可以使用 mixin 里面定义好的变量、方法，如：</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span>globalName<span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 这是全局名称</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// abc</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>    square<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">two</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><blockquote><p>在组件的调用中，mixins 的数据是独立的、不想干扰的如：</p></blockquote><p><img src="./mixins1.gif" alt="在组件的调用中，mixins 的数据是独立的、不想干扰的"></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kid</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>kid</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> mixins2 <span class="token keyword">from</span> <span class="token string">"./mixins2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const mixins2 = {</span><span class="token comment" spellcheck="true">//   data() {</span><span class="token comment" spellcheck="true">//     return {</span><span class="token comment" spellcheck="true">//       msg: 1,</span><span class="token comment" spellcheck="true">//     };</span><span class="token comment" spellcheck="true">//   },</span><span class="token comment" spellcheck="true">//   methods: {</span><span class="token comment" spellcheck="true">//     foo() {</span><span class="token comment" spellcheck="true">//       this.msg++;</span><span class="token comment" spellcheck="true">//     },</span><span class="token comment" spellcheck="true">//   },</span><span class="token comment" spellcheck="true">// };</span><span class="token comment" spellcheck="true">// export default mixins2</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;h1 @click="foo">child component- {{msg}}&lt;/h1>'</span><span class="token punctuation">,</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixins2<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"kid"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;h1 @click="foo">kid component- {{msg}}&lt;/h1>'</span><span class="token punctuation">,</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixins2<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>data 组件中引用 代替 mixins 中引用</p></blockquote><blockquote><p>methods 组件中调用 代替 mixins 中调用</p></blockquote><blockquote><p>生命周期调用顺序<img src="./lifeCycle.png" alt="生命周期调用顺序"></p></blockquote><h2 id="实践-1：状态码统一过滤"><a href="#实践-1：状态码统一过滤" class="headerlink" title="实践 1：状态码统一过滤"></a>实践 1：状态码统一过滤</h2><p>一般情况下不要全局使用，因为会污染 vue 所有实例，这里通过一个简单的应用展示 mixin 的使用技巧，在所有 vue 实例中添加统一状态码过滤器。</p><p>因为自定义方法会在所有的实例中混入，如果按照以前的方法，难免会有覆盖原先的方法的危险，按照官方的建议，混入的自定义方法名增加前缀 $_ 用作区分。</p><p>创建一个 config.js 文件，用于保存状态码对应的含义，将其暴露出去</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> typeConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"type one"</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"type two"</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"type three"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再创建一个 filters.js 文件，用于保存所有的自定义函数</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> typeConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./config"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    $_filterType<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> typeConfig<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">"type undefined"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，在 main.js 中引入我们的 filters 方法集</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> filter <span class="token keyword">from</span> <span class="token string">"./filters"</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来，我们就可以在 .vue 的模板文件中随意使用自定义函数了</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{typeStatus | $_filterType}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实践-2：大量表格页面中的分页功能"><a href="#实践-2：大量表格页面中的分页功能" class="headerlink" title="实践 2：大量表格页面中的分页功能"></a>实践 2：大量表格页面中的分页功能</h2><p>简单通用混入 list.js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这些东西我们在list中处理，就不需要在每个页面再去手动的做这个了。</span>      loading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 伴随loading状态</span>      pageNo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 页码</span>      pageSize<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 页长</span>      totalCount<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 总个数</span>      pageSizes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//页长数</span>      pageLayout<span class="token punctuation">:</span> <span class="token string">'total, sizes, prev, pager, next, jumper'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 分页布局</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分页回掉事件</span>    <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pageSize <span class="token operator">=</span> val      <span class="token comment" spellcheck="true">// todo</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    handleCurrentChange <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pageNo <span class="token operator">=</span> val      <span class="token comment" spellcheck="true">// todo</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 表格数据请求成功的回调 处理完公共的部分（分页，loading取消）之后把控制权交给页面     * @param {*} apiResult     * @returns {*} promise     */</span>    listSuccessCb <span class="token punctuation">(</span>apiResult <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>reslove<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> tempList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 临时list</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>          <span class="token comment" spellcheck="true">// todo</span>          <span class="token comment" spellcheck="true">// 直接抛出</span>          <span class="token function">reslove</span><span class="token punctuation">(</span>tempList<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 处理异常情况     * ==> 简单处理  仅仅是对表格处理为空以及取消loading     */</span>    listExceptionCb <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这个生命周期是在使用组件的生命周期之前</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// todo</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们直接在组件中使用这个 mixins</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> mixin <span class="token keyword">from</span> <span class="token string">'@/mixins/list'</span> <span class="token comment" spellcheck="true">// 引入</span><span class="token keyword">import</span> <span class="token punctuation">{</span>getList<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/demo'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'mixins-demo'</span><span class="token punctuation">,</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 使用mixins</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加载列表</span>    load <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> para <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token function">getList</span><span class="token punctuation">(</span>para<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listSuccessCb</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listExceptionCb</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实践-3：mixins-做公共数据的管理"><a href="#实践-3：mixins-做公共数据的管理" class="headerlink" title="实践 3：mixins 做公共数据的管理"></a>实践 3：mixins 做公共数据的管理</h2><p>有些时候我们有一些公共的数据它可能 3，4 个模块取使用但是又达不到全局的这种规模。这个时候我们就可以用 mixins 去管理他们，比如我们有几个模块要使用用户类型这个列表，我们来看使用 mixins 来实现共享。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// types.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>getTypes<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/demo'</span> <span class="token comment" spellcheck="true">// ajax</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      types<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// ==>  {name: '', value: ''}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取列表</span>    getAllTypesList <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getApiList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// todo</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>types <span class="token operator">=</span> result <span class="token comment" spellcheck="true">// 假设result就是我们需要使用的数据</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在需要使用这个mixins的时候取自动请求数据  这个可要可不要  你想在父组件中执行也是ok的</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllTypesList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中引用</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> typeMixin <span class="token keyword">from</span> <span class="token string">'@/mixins/types'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'template'</span><span class="token punctuation">,</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>typeMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// types这个数组在使用组件中不用多余的定义，直接拿来用就行</span>      type<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于 mixins 中得数据我们可以在组件中直接使用</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>type<span class="token punctuation">"</span></span> <span class="token attr-name">clearable</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择类型<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in types<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.templateName<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们这样就可以不用 vuex 来去管理那些只有在模块间复用几次的数据，而且非常方便得去取我们想要得数据，连定义都省了。但是这有一个缺点。就是每次都会去重新请求这些数据。如果你不在乎这一点点瑕疵的话，我觉得用起来是完全 ok 得。</p><h4 id="extends、-mixins-、组件的执行顺序"><a href="#extends、-mixins-、组件的执行顺序" class="headerlink" title="extends、 mixins 、组件的执行顺序"></a><font id="item1">extends、 mixins 、组件的执行顺序</font></h4><p>mixinsExtends.js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//暴露两个mixins对象</span><span class="token keyword">export</span> <span class="token keyword">const</span> mixinsTest <span class="token operator">=</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mixinsTest 的created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mixinsTest的beforeCreated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> mixinsTest2 <span class="token operator">=</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mixinsTest2 的created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mixinsTest2 的beforeCreated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只能使用一个extends对象，多个无效，extends会先于mixins执行</span><span class="token keyword">export</span> <span class="token keyword">const</span> extendsTest <span class="token operator">=</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">hello3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"extendsTest 的created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"extendsTest 的beforeCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.vue</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span> mixinsTest<span class="token punctuation">,</span> mixinsTest2<span class="token punctuation">,</span> extendsTest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./mixinsExtends"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件的beforeCreated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件的created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixinsTest2<span class="token punctuation">,</span> mixinsTest<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 先调用那个mixins对象，就先执行哪个</span>  <span class="token keyword">extends</span><span class="token punctuation">:</span> extendsTest<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 使用extends</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"css"</span> scoped<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行结果<br><img src="./mixinsExtends.png" alt=""></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> extends </tag>
            
            <tag> mixins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css预处理器 - sass</title>
      <link href="2020/12/09/sass/"/>
      <url>2020/12/09/sass/</url>
      
        <content type="html"><![CDATA[<blockquote><p>css预处理器包含：sass, lass<br>sass/less区别：less基于javascript通过客户端处理，sass基于Ruby语言开发通过服务端处理，所以less慢于sass</p></blockquote><h2 id="保持sass条理性和可读性最基本三个方法：嵌套、导入、注释"><a href="#保持sass条理性和可读性最基本三个方法：嵌套、导入、注释" class="headerlink" title="保持sass条理性和可读性最基本三个方法：嵌套、导入、注释"></a>保持sass条理性和可读性最基本三个方法：<a href="#nest">嵌套</a>、<a href="#import">导入</a>、<a href="#annotation">注释</a></h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>变量跟es6中的let一样具有块级作用域，必须先定义后使用。 <strong>less变量用的是<font color=#ec7259>@</font></strong></p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">$color<span class="token pseudo-class">:red</span>;$fontSize<span class="token pseudo-class">:16px</span>;$color<span class="token pseudo-class">:blue</span>;body</span><span class="token punctuation">{</span>       <span class="token property">background</span><span class="token punctuation">:</span>$color<span class="token punctuation">;</span>    //blue    使用前最后一处声明有效，前边的值被覆盖    <span class="token property">font-size</span><span class="token punctuation">:</span>$fontSize<span class="token punctuation">}</span>$<span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a><font id="nest">嵌套</font></h3><p>例1</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.data</span></span><span class="token punctuation">{</span>    <span class="token selector">&amp; > ul</span><span class="token punctuation">{</span>                       <span class="token selector">//<span class="token class">.data</span> > ul               <span class="token class">.li</span></span><span class="token punctuation">{</span>            <span class="token selector">&amp;<span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token selector">//<span class="token class">.data</span> ul <span class="token class">.li</span><span class="token pseudo-class">:hover</span>        &amp;：父选择器的标识符            body<span class="token class">.id</span> &amp; </span><span class="token punctuation">{</span><span class="token punctuation">}</span>         <span class="token selector">//body<span class="token class">.id</span> <span class="token class">.data</span> >ul <span class="token class">.li</span>            &amp;-title</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token selector">//<span class="token class">.data</span> ul <span class="token class">.li-title</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector">h1,h2</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token selector">//<span class="token class">.data</span> h1, <span class="token class">.data</span> h2</span><span class="token punctuation">{</span><span class="token punctuation">}</span>          //群组选择器<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例2        嵌套属性</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.nav</span></span><span class="token punctuation">{</span>    <span class="token selector">border: </span><span class="token punctuation">{</span>        <span class="token property">style</span><span class="token punctuation">:</span>solid<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">1</span>px<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token selector">==><span class="token class">.nav</span></span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例3</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.nav</span></span><span class="token punctuation">{</span>    <span class="token selector">border: 1px solid <span class="token id">#ccc</span> </span><span class="token punctuation">{</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token selector">==><span class="token class">.nav</span></span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ccc</span><span class="token punctuation">;</span> <span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a><font id="import">导入</font></h3><blockquote><p>css中的import跟sass中的import的区别：<br>css @import:在css文件中执行到@import时浏览器去下载css文件=》页面加载慢<br>sass @import:生成css文件时把文件导入进来，跟原有文件合成一个文件=》无需发起额外请求下载</p></blockquote><blockquote><p>局部文件：以下划线开头，不生成css文件，只用来被引用，可被多文件引用<br>例：想导入style/_night-sky.scss    =&gt;@import “style/night-sky”</p></blockquote><blockquote><p>导入文件又要修改文件中的全局变量：<strong><font color=#ec7259>!default</font></strong></p></blockquote><pre class="line-numbers language-css"><code class="language-css">$<span class="token property">c</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">'src/assets/css/ab'</span><span class="token punctuation">;</span></span><span class="token selector">_ab<span class="token class">.scss:</span>  $c: green !default;  <span class="token class">.cont</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> $c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a><font id="annotation">注释</font></h3><blockquote><p>.a{}    /<em>这种注释内容会出现在生成的css文件中</em>/<br>.b{}    //这种注释不会出现在生成的css文件中，叫做：静默注释<br>.c{color/<em>这块注释也不会出现在生成的css文件中</em>/ :red;}   </p></blockquote><h3 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">background</span><span class="token punctuation">(</span>$color<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> $color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">background</span><span class="token punctuation">(</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例2：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">link-colors</span><span class="token punctuation">(</span>$<span class="token property">normal</span><span class="token punctuation">:</span>blue, $<span class="token property">hover</span><span class="token punctuation">:</span>red, $<span class="token property">visited</span><span class="token punctuation">:</span>green<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>    <span class="token selector">//声明    color: $normal;    &amp;<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> $hover<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token selector">&amp;<span class="token pseudo-class">:visited</span> </span><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> $visited<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">link-colors</span><span class="token punctuation">(</span> $<span class="token property">normal</span><span class="token punctuation">:</span> blue, $<span class="token property">visited</span><span class="token punctuation">:</span> green, $<span class="token property">hover</span><span class="token punctuation">:</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    //调用<span class="token number">1</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">link-colors</span><span class="token punctuation">(</span> $<span class="token property">hover</span><span class="token punctuation">:</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    //调用<span class="token number">2</span><span class="token atrule"><span class="token rule">@include</span> <span class="token function">link-colors</span><span class="token punctuation">(</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    //调用<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>less:声明：<font color=#ec7259>.className{}</font> 调用：<font color=#ec7259>.className()</font></strong></p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.redC</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">body</span><span class="token punctuation">{</span>    <span class="token atrule"><span class="token rule">@extend</span> .redC<span class="token punctuation">;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>混合器主要用于展示性样式的重用，而类名用于语义化样式的重用</p></blockquote><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><blockquote><p>+、-、*、/、%、calc()、</p></blockquote><h4 id="sass中的小技巧"><a href="#sass中的小技巧" class="headerlink" title="sass中的小技巧"></a>sass中的小技巧</h4><blockquote><p>在有引号的文本字符串中使用 #{} 插值语句可以添加动态的值。使用 #{}可以避免 Sass 运行运算表达式，直接编译 CSS</p></blockquote><p>例1：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">p<span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span><span class="token selector">content: "I ate #</span><span class="token punctuation">{</span><span class="token number">5</span> + <span class="token number">10</span><span class="token punctuation">}</span> pies!<span class="token string">";}=>p:before { content: "</span>I ate <span class="token number">15</span> pies!"<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例2</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">mar</span><span class="token punctuation">(</span>$dir,$size<span class="token punctuation">)</span></span><span class="token punctuation">{</span><span class="token selector">margin-#</span><span class="token punctuation">{</span>$dir<span class="token punctuation">}</span> <span class="token punctuation">:</span> $size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.cont</span></span><span class="token punctuation">{</span>@include <span class="token function">mar</span><span class="token punctuation">(</span><span class="token string">'left'</span>,<span class="token number">20</span>px<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="for循环"><a href="#for循环" class="headerlink" title="@for循环"></a>@for循环</h4><blockquote><p>@for $i from 开始值 throuth 结束值（包括结束值）<br>@for $i from 开始值 to 结束值（不包括结束值）</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@for</span> $i from 1 throuth 3</span><span class="token punctuation">{</span>    <span class="token selector"><span class="token class">.item-</span>#</span><span class="token punctuation">{</span>$i<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">20</span>px * $i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">==> <span class="token class">.item-1</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.item-2</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.item-3</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">60</span>px<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>require.context()</title>
      <link href="2020/12/09/require.context/"/>
      <url>2020/12/09/require.context/</url>
      
        <content type="html"><![CDATA[<p>语法：</p><pre class="line-numbers language-javascript"><code class="language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> useSubdirectories <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> regExp <span class="token operator">=</span> <span class="token regex">/^\.\/.*$/</span><span class="token punctuation">,</span> mode <span class="token operator">=</span> <span class="token string">'sync'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-javascript"><code class="language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./test'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/\.test\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//（创建出）一个 context，其中文件来自 test 目录，request 以 `.test.js` 结尾。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex">/\.stories\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// （创建出）一个 context，其中所有文件都来自父文件夹及其所有子级文件夹，request 以 `.stories.js` 结尾。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="context-module-API"><a href="#context-module-API" class="headerlink" title="context module API"></a>context module API</h2><p>一个 context module 会导出一个（require）函数，此函数可以接收一个参数：request。</p><p>require.context函数接受三个参数</p><ul><li>directory {String} - 要搜索的目录</li><li>useSubdirectories {Boolean} - 是否还搜索其子目录</li><li>regExp {RegExp} - 匹配文件的正则</li></ul><p>此导出函数有三个属性：resolve, keys, id。</p><ul><li>resolve 是一个函数，它返回 request 被解析后得到的模块 id。</li><li>keys 也是一个函数，它返回一个数组，由所有可能被此 context module 处理的请求组成。【由所有符合上下文模块处理的请求组成。 】</li><li>id 是 context module 的模块 id【 是上下文模块里面所包含的模块 id】. 它可能在你使用 module.hot.accept 时会用到。</li></ul><blockquote><p>注意：传递给 require.context 的参数必须是字面量(literal)！【不能是变量，否则在编译阶段无法定位目录】</p></blockquote><h2 id="实例：组织路由"><a href="#实例：组织路由" class="headerlink" title="实例：组织路由"></a>实例：组织路由</h2><ol><li><p>分割路由<br>首先为了方便我们管理，我们把router目录下的文件分割为以下结构</p><pre class="line-numbers language-base"><code class="language-base">router                           // 路由文件夹|__index.js                    // 路由组织器：用来初始化路由等等|__common.js                   // 通用路由：声明通用路由|__modules                     // 业务逻辑模块：所以的业务逻辑模块     |__index.js              // 自动化处理文件：自动引入路由的核心文件     |__home.js               // 业务模块home：业务模块     |__a.js                  // 业务模块a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>modules文件夹中处理业务模块</p></li></ol><p>我们通过上面提到的require.context()接下来编写自动化的核心部分index.js</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> routeOptions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> files <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex">/\.js$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>files<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">'./index.js'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>  routeOptions <span class="token operator">=</span> routeOptions<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">files</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> routeOptions<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>route<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>route<span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">{</span>    route <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>route<span class="token punctuation">,</span>      component<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`@/views/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>route<span class="token punctuation">.</span>filePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>      meta<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token operator">...</span>route<span class="token punctuation">.</span>meta      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> route<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span>  routes<span class="token punctuation">,</span>  <span class="token function">scrollBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他模块模板</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/activityFroms"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"activityFroms"</span><span class="token punctuation">,</span>    filePath<span class="token punctuation">:</span> <span class="token string">"activity/activityFroms.vue"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> require.context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中的相等操作符 ( 详解 [] == []、[] == ![]、{} == !{} )</title>
      <link href="2020/12/09/jsOperator/"/>
      <url>2020/12/09/jsOperator/</url>
      
        <content type="html"><![CDATA[<p>相等操作符会先转换操作数（通常称为强制转型），然后比较它们的相等性。</p><p>在转换不同的数据类型时，相等操作符遵循下列基本规则：</p><ol><li><p>如果有一个操作数是布尔值，则在比较相等性之前，将其转换为数值；</p></li><li><p>如果一个操作数是字符串，另一个操作数是数值，在比较之前先将字符串转换为数值；</p></li><li><p>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较；</p></li><li><p>如果有一个操作数是 NaN，无论另一个操作数是什么，相等操作符都返回 false；</p></li><li><p>如果两个操作数都是对象，则比较它们是不是同一个对象。如果指向同一个对象，则相等操作符返回 true；</p></li><li><p>在比较相等性之前，不能将 null 和 undefined 转成其他值。</p></li><li><p>null 和 undefined 是相等的。</p></li></ol><h2 id="一、基本规则"><a href="#一、基本规则" class="headerlink" title="一、基本规则"></a>一、基本规则</h2><p>上面阐述的 1、2、3 三条规则，总结成一句话就是：</p><p>如果相等操作符两边的操作数，不包含 null 或者 undefined，且两个操作数不全是对象，<br>在执行相等比较之前，会先调用 Number() 将两个操作数强制转为 Number 类型，然后进行比较<br>所以在使用相等操作符的时候，会有以下情况：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">'55'</span> <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Number('55') == 55 -> true</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//Number(false) == 0 -> true</span><span class="token string">"wise"</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//Number("wise") == 3 -> NaN == 3 -> false</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//Number([]) == 0 -> 0 == 0 -> true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是在特殊情况下，也就是两边都有对象的时候，会产生看似不合理的结果：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false （参考第4条规则）</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//false</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、-和"><a href="#二、-和" class="headerlink" title="二、[] == [] 和 {} == {}"></a>二、[] == [] 和 {} == {}</h2><p>在 JavaScript 中，<b>Object、Array、Function、RegExp、Date 都是引用类型</b></p><p>声明引用类型的时候，变量名保存在 js 的<b>栈内存</b>里面，而对应的值保存在<b>堆内存</b>里面</p><p>而这个变量在栈内存中实际保存的是：这个值在堆内存中的地址，也就是指针</p><p>所以 [] == [] 、{} == {} 都为false。</p><p><b>如果两个对象指向同一个对象，相等操作符返回 true</b></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span>b<span class="token punctuation">;</span>b <span class="token operator">==</span> a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true（变量a保存的是b的指针，它们指向同一个对象）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三、-和"><a href="#三、-和" class="headerlink" title="三、[] == ![] 和 {} == !{}"></a>三、[] == ![] 和 {} == !{}</h2><blockquote><p>ECMAScript 中规定，<b>逻辑非 (!) </b>的优先级高于<b>相等操作符 ( == )</b></p></blockquote><p>在比较 [] == ![] 的时候，先计算 ![] 得到布尔值 false</p><p>所以实际上比较的是 [] == false</p><p>然后根据上面的第1条规则和第3条规则，将两个操作数转为数值类型：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// ->  0 == 0  ->  true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在比较 {} == !{} 的时候，也是遵守同样的规则：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token operator">-</span><span class="token operator">></span>  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>  <span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">></span>  <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后第4条规则规定：<b>如果有一个操作数是 NaN，相等操作符返回 false</b></p><p>所以 {} == !{} 的结果是 false</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js Array 方法总结</title>
      <link href="2020/12/09/jsArrayMethods/"/>
      <url>2020/12/09/jsArrayMethods/</url>
      
        <content type="html"><![CDATA[<h3 id="改变原数组的方法"><a href="#改变原数组的方法" class="headerlink" title="改变原数组的方法"></a>改变原数组的方法</h3><ul><li>push  数组末尾追加元素</li><li>pop   删除数组最后元素</li><li>unshift   数组开始添加元素</li><li>shift     删除数组开始元素</li><li><a href="#item1">splice   实现数组的增加、删除、修改</a></li><li>sort  数组排序</li><li>reverse   数组倒序</li></ul><p><a href="#item2">删除数组末尾一项的几种方法</a><br><a href="#item3">向数组末尾追加项的几种方法</a></p><h3 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h3><ul><li><a href="#item4">slice - 由begin和end决定的原数组的浅拷贝</a> </li><li>concat 拼接两个数组</li><li>toString()  数组转字符串，转换后用逗号分隔</li><li>join 数组转字符串 未指定分隔符用逗号分隔</li><li>indexOf/lastIndexOf 检测当前项的index值 - ary.indexOf(val)</li><li>includes 检测数组是否包含某项 ary.includes(val)=&gt;true||false</li><li>forEach 遍历数组中每一项，无返回值</li><li>map 数组映射 支持返回值 新数组跟旧数组长度一样</li><li><a href="https://qiuchunhong.github.io/2020/06/21/jsArrayRecude/" target="_blank" rel="noopener">reduce 累加器</a></li><li>filter((val,index,array)=&gt;{ return }) 过滤</li><li>find 返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。arr.find( (element,index,arry)=&gt;{return} )</li><li>findIndex 返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。arr.findIndex( (element,index,arry)=&gt;{return} )</li><li>some 一项条件成立就返回true都不成立返回false。arr.some(callback(element[, index[, array]])[, thisArg])</li><li>every 所有的都成立才返回true,有一项不成立返回false。arr.every(callback(element[, index[, array]])[, thisArg])</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">flat 扁平化 newArray = arr.flat([depth]) depth默认1，Infinity</a></li></ul><p><a href="#item5">slice 方法将一个类数组（Array-like）对象/集合转换成一个新数组</a></p><hr><h4 id="splice-实现数组的增加、删除、修改"><a href="#splice-实现数组的增加、删除、修改" class="headerlink" title="splice 实现数组的增加、删除、修改"></a><font id="item1">splice 实现数组的增加、删除、修改</font></h4><blockquote><p>使用方法：array.splice(start[, deleteCount[, item1[, item2[, …]]]])<br><strong>start​</strong><br>指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数，这意味着-n是倒数第n个元素并且等价于array.length-n）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。<br><strong>deleteCount</strong><font color=red>【可选】</font><br>整数，表示要移除的数组元素的个数<br>如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br>如果 deleteCount 被省略了，或者它的值大于等于array.length - start(也就是说，如果它大于或者等于start之后的所有元素的数量)，那么start之后数组的所有元素都会被删除。<br>如果 deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素<br><strong>item1, item2, …</strong><font color=red>【可选】</font></p></blockquote><p>【删除】返回值是一个数组，里面是删除项</p><ul><li>ary.splice(0):可以清空数组，把原始数组中的内容基于新数组储存起来（有点类似于数组克隆）</li><li>ary.splice(ary.length-1):删除最后一项</li><li>ary.splice(n):从第n位开始删除后面所有元素</li><li>ary.splice(0,1):删除第一项</li></ul><p>【新增】 ary.splice(n,0,x);在索引n的前面添加了x项；</p><ul><li>ary.splice(ary.length,0,x)：在数组最后增加x项；</li><li>ary.splice(0,0,x):在数组开头增加x项；</li></ul><p>【修改】 用x替代删除的m即可</p><h4 id="删除数组末尾一项的几种方法"><a href="#删除数组末尾一项的几种方法" class="headerlink" title="删除数组末尾一项的几种方法 "></a><font id="item2">删除数组末尾一项的几种方法 </font></h4><ul><li>arr.length–</li><li>arr.pop()   ：返回结果 删除的项</li><li>arr.splice(arr.length-1)   ： 返回结果是 [删除的项]</li><li>delete arr[arr.length-1]    ： 虽然能删除，但是length长度不变（一般不用）</li></ul><h4 id="向数组末尾追加项的几种方法"><a href="#向数组末尾追加项的几种方法" class="headerlink" title="向数组末尾追加项的几种方法 "></a><font id="item3">向数组末尾追加项的几种方法 </font></h4><ul><li>arr.push(“增加的项”)</li><li>arr[arr.length]=”增加的项”</li><li>arr.splice(arr.length , 0 , “增加的项”)</li></ul><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a><font id="item4">slice</font></h3><blockquote><p>slice() 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。</p></blockquote><blockquote><p><strong>begin</strong><font color=red>【可选】</font><br>提取起始处的索引（从 0 开始），从该索引开始提取原数组元素。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 begin，则 slice 从索引 0 开始。<br>如果 begin 大于原数组的长度，则会返回空数组。<br><strong>end</strong><font color=red>【可选】</font><br>提取终止处的索引（从 0 开始），在该索引处结束提取原数组元素。slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end）。<br>slice(1,4) 会提取原数组中从第二个元素开始一直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 end 被省略，则 slice 会一直提取到原数组末尾。<br>如果 end 大于数组的长度，slice 也会一直提取到原数组末尾。</p></blockquote><h3 id="slice-方法将一个类数组（Array-like）对象-集合转换成一个新数组"><a href="#slice-方法将一个类数组（Array-like）对象-集合转换成一个新数组" class="headerlink" title="slice 方法将一个类数组（Array-like）对象/集合转换成一个新数组"></a><font id="item5">slice 方法将一个类数组（Array-like）对象/集合转换成一个新数组</font></h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> list1 <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reduce - js</title>
      <link href="2020/12/09/jsArrayRecude/"/>
      <url>2020/12/09/jsArrayRecude/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>reduce()</strong> 方法对数组中的每个元素执行一个由您提供的 reducer 函数(升序执行)，将其结果汇总为单个返回值。</p></blockquote><blockquote><p><strong>语法：</strong><br>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</p></blockquote><p><strong>reducer</strong> callback 接收 4 个参数:</p><ol><li>Accumulator (acc) (累计器)</li><li>Current Value (cur) (当前值)</li><li>Current Index (idx) (当前索引) <font color="red">[可选]</font></li><li>Source Array (src) (源数组) <font color="red">[可选]</font></li></ol><ul><li>initialValue 作为第一次调用 callback 函数时的第一个参数的值。 <font color="red">[可选]</font></li></ul><p><strong>注意</strong></p><ul><li>回调函数第一次执行时，<font color=#0099ff>accumulator</font> 和<font color=#0099ff>currentValue</font>的取值有两种情况：如果调用 reduce()时提供了<font color=#0099ff>initialValue</font>，<font color=#0099ff>accumulator</font>取值为<font color=#0099ff>initialValue</font>，<font color=#0099ff>currentValue</font>取数组中的第一个值；如果没有提供 <font color=#0099ff>initialValue</font>，那么<font color=#0099ff>accumulator</font>取数组中的第一个值，<font color=#0099ff>currentValue</font>取数组中的第二个值。<blockquote><ul><li>如果数组为空且没有提供 initialValue，会抛出 TypeError</li><li>如果数组仅有一个元素并且没有提供 initialValue， 或者有提供 initialValue 但是数组为空，那么此唯一值将被返回并且 callback 不会被执行</li></ul></blockquote></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><a href="#item1">数组求和</a></li><li><a href="#item2">累加对象数组里的值</a></li><li><a href="#item3">将二维数组转化为一维</a></li><li><a href="#item4">计算数组中每个元素出现的次数</a></li><li><a href="#item5">按属性对 object 分类</a></li><li><a href="#item6">使用扩展运算符和 initialValue 绑定包含在对象数组中的数组</a></li><li><a href="#item7">数组去重</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">更多…</a></li></ul><h4 id="数组求和"><a href="#数组求和" class="headerlink" title="数组求和"></a><font id="item1">数组求和</font></h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span> acc<span class="token punctuation">,</span> cur <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span>    <span class="token number">0</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> total    <span class="token comment" spellcheck="true">// 6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="累加对象数组里的值"><a href="#累加对象数组里的值" class="headerlink" title="累加对象数组里的值"></a><font id="item2">累加对象数组里的值</font></h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">.</span>x        <span class="token punctuation">,</span><span class="token number">0</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum  <span class="token comment" spellcheck="true">// 6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将二维数组转化为一维"><a href="#将二维数组转化为一维" class="headerlink" title="将二维数组转化为一维"></a><font id="item3">将二维数组转化为一维</font></h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> flattened <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> flattened    <span class="token comment" spellcheck="true">// [0, 1, 2, 3, 4, 5]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算数组中每个元素出现的次数"><a href="#计算数组中每个元素出现的次数" class="headerlink" title="计算数组中每个元素出现的次数"></a><font id="item4">计算数组中每个元素出现的次数</font></h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tiff'</span><span class="token punctuation">,</span> <span class="token string">'Bruce'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> countNames <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>allNames<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token keyword">in</span> allNames<span class="token punctuation">)</span><span class="token punctuation">{</span>            allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">++</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            allNames<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> allNames    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> countNames    <span class="token comment" spellcheck="true">// {Alice: 2, Bob: 1, Tiff: 1, Bruce: 1}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按属性对-object-分类"><a href="#按属性对-object-分类" class="headerlink" title="按属性对 object 分类"></a><font id="item5">按属性对 object 分类</font></h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Jane'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">groupBy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>attr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token keyword">in</span> acc<span class="token punctuation">)</span><span class="token punctuation">{</span>                acc<span class="token punctuation">[</span>cur<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                acc<span class="token punctuation">[</span>cur<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>acc<span class="token punctuation">]</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> acc        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">groupBy</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// { </span>    <span class="token comment" spellcheck="true">//   20: [</span>    <span class="token comment" spellcheck="true">//     { name: 'Max', age: 20 }, </span>    <span class="token comment" spellcheck="true">//     { name: 'Jane', age: 20 }</span>    <span class="token comment" spellcheck="true">//   ], </span>    <span class="token comment" spellcheck="true">//   21: [{ name: 'Alice', age: 21 }] </span>    <span class="token comment" spellcheck="true">// }</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用扩展运算符和-initialValue-绑定包含在对象数组中的数组"><a href="#使用扩展运算符和-initialValue-绑定包含在对象数组中的数组" class="headerlink" title="使用扩展运算符和 initialValue 绑定包含在对象数组中的数组"></a><font id="item6">使用扩展运算符和 initialValue 绑定包含在对象数组中的数组</font></h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Anna'</span><span class="token punctuation">,</span>        books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bible'</span><span class="token punctuation">,</span> <span class="token string">'Harry Potter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">21</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span>        books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'War and peace'</span><span class="token punctuation">,</span> <span class="token string">'Romeo and Juliet'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">26</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span>        books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'The Lord of the Rings'</span><span class="token punctuation">,</span> <span class="token string">'The Shining'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> allbooks <span class="token operator">=</span> friends<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>curr<span class="token punctuation">.</span>books<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Alphabet'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> allbooks    <span class="token comment" spellcheck="true">// ["Alphabet", "Bible", "Harry Potter", "War and peace", "Romeo and Juliet", "The Lord of the Rings", "The Shining"]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a><font id="item7">数组去重</font></h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>acc<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//acc.indexOf(cur) == -1 </span>            acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> acc    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res  <span class="token comment" spellcheck="true">// ["a", "b", "c", "e", "d"]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> acc<span class="token punctuation">.</span>length <span class="token operator">===</span><span class="token number">0</span> <span class="token operator">||</span> acc<span class="token punctuation">[</span>acc<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>            acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> acc    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> res <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> reduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js继承、class</title>
      <link href="2020/12/09/js-%E7%BB%A7%E6%89%BF/"/>
      <url>2020/12/09/js-%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>下面代码中，b是B类的实例，它的constructor方法就是B类原型的constructor方法。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// === function B(){}</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>constructor <span class="token operator">===</span> B<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于类的方法都定义在prototype对象上面，所以类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// es5写法</span><span class="token keyword">function</span> <span class="token function">U</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>U<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">U</span><span class="token punctuation">(</span><span class="token punctuation">)</span>u<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es6写法</span><span class="token keyword">class</span> <span class="token class-name">P</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>P<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实例1</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// this.color = color; // ReferenceError</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确</span>  <span class="token punctuation">}</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span><span class="token string">', y='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token operator">+</span><span class="token string">', color='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token operator">+</span><span class="token string">', x+y='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorPoint</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//x=12, y=3, color=green, x+y=15</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token keyword">instanceof</span> <span class="token class-name">ColorPoint</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token keyword">instanceof</span> <span class="token class-name">Point</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>ColorPoint<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解析：</strong></p><ul><li>super()必须写到子类的constructor中的最上方。只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。如果子类没有定义constructor方法，这个方法会被默认添加，代码如下<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>super作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。</li><li>super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</li></ul></blockquote></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。</p><ul><li>父类的静态方法，也会被子类继承。hello()是A类的静态方法，B继承A，也继承了A的静态方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 中 call()、apply()、bind()</title>
      <link href="2020/12/09/js-call-apply/"/>
      <url>2020/12/09/js-call-apply/</url>
      
        <content type="html"><![CDATA[<blockquote><p>call()、apply()、bind() 都是用来重定义this这个对象的。</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'Jerry'</span><span class="token punctuation">,</span>    objAge<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>    myFun<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>fm<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'年龄：'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">', 来自'</span><span class="token operator">+</span>fm<span class="token operator">+</span><span class="token string">'去往'</span><span class="token operator">+</span>t<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'Spike'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>objAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// undefined</span>obj<span class="token punctuation">.</span><span class="token function">myFun</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Jerry年龄：undefined, 来自a去往b</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Spike年龄：5, 来自成都去往上海 </span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Spike年龄：5, 来自成都去往上海</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Spike年龄：5, 来自成都去往上海</span>obj<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Spike年龄：5, 来自成都,上海去往undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟实现-call-和-apply"><a href="#模拟实现-call-和-apply" class="headerlink" title="模拟实现 call 和 apply"></a>模拟实现 <code>call</code> 和 <code>apply</code></h2><p>可以从以下几点来考虑如何实现</p><ul><li>不传入第一个参数，那么默认为 window</li><li>改变了 this 指向，让新的对象可以执行该函数。那么思路是否可以变成给新的对象添加一个函数，然后在执行完以后删除？</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> c <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>  c<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> c<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'lee'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">fn</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>f<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>t<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>b<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // my name is , from 上海 to 成都</span>b<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // my name is , from 上海 to 成都</span>b<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token string">'成都'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// my name is lee, from 上海 to 成都</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myApply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> c <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>  c<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    result <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">delete</span> c<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">myfn</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">',我从'</span><span class="token operator">+</span>f <span class="token operator">+</span><span class="token string">'来，去往'</span><span class="token operator">+</span>t<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>b <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'lee'</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span>myfn<span class="token punctuation">.</span><span class="token function">myApply</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token string">'成都'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 我是lee,我从上海来，去往成都</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="2020/12/09/git/"/>
      <url>2020/12/09/git/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工作区、暂存区、本地仓库、远程仓库的理解，git 的常用命令总结。</p></blockquote><h3 id="工作区、暂存区、本地仓库、远程仓库"><a href="#工作区、暂存区、本地仓库、远程仓库" class="headerlink" title="工作区、暂存区、本地仓库、远程仓库"></a>工作区、暂存区、本地仓库、远程仓库</h3><ul><li>定义</li></ul><ol><li>工作区(workspace):即个人克隆项目到本地后,项目所在的文件夹目录.</li><li>暂存区(stash/index):用于储存工作区中的变更(增删改等改动)的文件的地方.操作时使用 git add 会将本地所有的变更提交到暂存区中</li><li>本地仓库(repository [rɪˈpɑːzətɔːri]):用于储存工作区和暂存区中提交上来的文件,使用 git commit -m ‘提交内容的描述’</li><li>远程仓库(remote):当进行到这里的时候即一个人的开发完毕的时,需要将自己开发的功能合并到著主项目中去,但因为是多人开发,要保管好主项目中存储的代码和文件的话,就需要放在搭建好的远程 git 仓库中,即远程仓库.具体操作:git push origin 远程分支名即可.</li></ol><ul><li>工作区、暂存区、本地仓库、远程仓库关系图<br><img src="./git01.png" alt="工作区、暂存区、本地仓库、远程仓库关系图"></li></ul><h3 id="创建-git-项目"><a href="#创建-git-项目" class="headerlink" title="创建 git 项目"></a>创建 git 项目</h3><pre><code>// 如果已有项目cd 项目所在文件夹git init// 如果没有初始化项目无文件夹git init 项目名称/文件夹名称cd 文件夹名称// 克隆git项目git clone 路径</code></pre><h3 id="项目中修改提交用户信息"><a href="#项目中修改提交用户信息" class="headerlink" title="项目中修改提交用户信息"></a>项目中修改提交用户信息</h3><blockquote><p>目录：.git/config</p></blockquote><pre><code>[user]    email = 527081722@qq.com    name = qiuchunhong</code></pre><h3 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h3><h5 id="分支-branch"><a href="#分支-branch" class="headerlink" title="分支 branch"></a>分支 branch</h5><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git branch</td><td align="left">已经存在分支列表，当前分支前面加“*”号标记</td></tr><tr><td align="left">git branch -a</td><td align="left">本地分支和远程分支</td></tr><tr><td align="left">git branch -r</td><td align="left">远程分支</td></tr><tr><td align="left">git checkout -b hotfix-aboutus</td><td align="left">创建并切换新分支</td></tr><tr><td align="left">git branch -m/-M oldbranch newbranch</td><td align="left">分支重命名</td></tr><tr><td align="left">git branch -d/-D branchname</td><td align="left">删除分支</td></tr><tr><td align="left">git branch -d -r branchname</td><td align="left">删除远程分支</td></tr></tbody></table><h5 id="缓存-stash"><a href="#缓存-stash" class="headerlink" title="缓存 stash"></a>缓存 stash</h5><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git stash</td><td align="left">将代码缓存</td></tr><tr><td align="left">git stash pop</td><td align="left">恢复缓存文件</td></tr><tr><td align="left">git stash list</td><td align="left">缓存列表</td></tr><tr><td align="left">git stash clear</td><td align="left">清除</td></tr><tr><td align="left">git stash drop + stash 名字</td><td align="left">删除指定缓存</td></tr><tr><td align="left">git stash show</td><td align="left">最新缓存跟本地代码差异</td></tr><tr><td align="left">git stash show stash@{1} -p</td><td align="left">查看指定 stash 与本地目录差异详情</td></tr></tbody></table><h5 id="重置-reset"><a href="#重置-reset" class="headerlink" title="重置 reset"></a>重置 reset</h5><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git reset –mixed commitId</td><td align="left">将本地仓库(commit)文件撤回至工作区(workspace)。【默认】可不带–mixed</td></tr><tr><td align="left">git reset –soft commitId</td><td align="left">将文件提交至本地仓库(commit)后撤回暂存区(add)</td></tr><tr><td align="left">git reset –hard commitId</td><td align="left">将工作区、暂存区、本地仓库的所有提交的文件全都撤销（会删除）</td></tr><tr><td align="left">HEAD</td><td align="left">当前版本</td></tr><tr><td align="left">HEAD^/~1</td><td align="left">上一版本</td></tr><tr><td align="left">HEAD^^/~2</td><td align="left">上两个版本</td></tr></tbody></table><h5 id="恢复-reset"><a href="#恢复-reset" class="headerlink" title="恢复 reset"></a>恢复 reset</h5><pre><code>git reloggit reset id</code></pre><h5 id="撤销-revert"><a href="#撤销-revert" class="headerlink" title="撤销 revert"></a>撤销 revert</h5><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git revert commitId</td><td align="left">将这个 commit 撤回，不影响后面的 commit</td></tr></tbody></table><dl><dt>vi 语法：<br>i -&gt; insert 插入,编辑模式<br>ESC -&gt; 退出编辑模式</dt><dd>-&gt; 进入命令行模式<br>w -&gt; 保存<br>q -&gt; 退出<br>:wq -&gt; 保存并退出</dd></dl><h5 id="查看分支是从哪个分支创建的"><a href="#查看分支是从哪个分支创建的" class="headerlink" title="查看分支是从哪个分支创建的"></a>查看分支是从哪个分支创建的</h5><pre><code>git reflog --date=local | grep &lt;branchname&gt;git reflog --date=local   // 查看本机git操作记录git reflog show  --date=iso youhua  // 查看&#39;youhua&#39;分支所有git操作记录</code></pre><p>[show]可写可不写</p><h5 id="修改以前-commit-信息的-author"><a href="#修改以前-commit-信息的-author" class="headerlink" title="修改以前 commit 信息的 author"></a>修改以前 commit 信息的 author</h5><pre><code># 第一步，（n）代表提交次数git rebase -i HEAD~n# 第二步然后按`i`编辑，把`pick` 改成 `edit`，按&#39;Esc&#39;退出编辑，按`:wq`保存退出# 第三步git commit --amend --author=&quot;作者 &lt;邮箱@xxxx.com&gt;&quot; --no-edit# 第四步git rebase --continue# 第五步git push --force</code></pre><h3 id="git报错解决方法"><a href="#git报错解决方法" class="headerlink" title="git报错解决方法"></a>git报错解决方法</h3><blockquote><p>LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443</p></blockquote><pre><code>git config --global http.sslBackend &quot;openssl&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css兼容问题</title>
      <link href="2020/12/09/css%E5%85%BC%E5%AE%B9/"/>
      <url>2020/12/09/css%E5%85%BC%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="css的选择符"><a href="#css的选择符" class="headerlink" title="css的选择符"></a>css的选择符</h3><ol><li>通配符选择器(*)</li><li>id选择器</li><li>类选择器</li><li>标签选择器(div,h1,p)</li><li>后代选择器(h1 p)</li><li>相邻后代选择器(ul&gt;li)</li><li>兄弟选择器(li ~a)</li><li>相邻兄弟选择器(li+a)</li><li>属性选择器(a[rel=”ab”])</li><li>伪元素选择器(a::before::after::firstLetter::firstLine::selection) 【伪类、伪元素详细列表】</li><li>伪类选择器：链接伪类(:link:visited:target)、动态伪类(:hover:active) LVHA、表单相关伪类(:enabled:disable:checked:focus)、结构性伪类(:nth-child(2n):first-child:last-child\nth-last-child(index):only-child:nth-of-type(index):first-of-type:last-of-type\nth-last-type(index):only-of-type:not:empty)</li></ol><h3 id="input-disabled后手机端颜色比设置的浅"><a href="#input-disabled后手机端颜色比设置的浅" class="headerlink" title="input disabled后手机端颜色比设置的浅"></a>input disabled后手机端颜色比设置的浅</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">input<span class="token pseudo-class">:disabled</span>, input<span class="token attribute">[disabled]</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">-webkit-opacity</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个文字渐变效果"><a href="#一个文字渐变效果" class="headerlink" title="一个文字渐变效果"></a>一个文字渐变效果</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.text-fill-color</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>top,<span class="token hexcode">#eee</span>,<span class="token hexcode">#aaa</span> <span class="token number">50%</span>,<span class="token hexcode">#333</span> <span class="token number">51%</span>,<span class="token hexcode">#000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span>text<span class="token punctuation">;</span>    <span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span>transparent<span class="token punctuation">;</span>    <span class="token property">font</span><span class="token punctuation">:</span>bold <span class="token number">95</span>px/<span class="token number">1.231</span> georgia,sans-serif<span class="token punctuation">;</span>    <span class="token property">text-transform</span><span class="token punctuation">:</span>uppercase<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;div class=<span class="token string">"text-fill-color"</span>>text-fill-color&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./gradient.png" alt="一个文字渐变效果"></p><h3 id="文本超出省略号显示"><a href="#文本超出省略号显示" class="headerlink" title="文本超出省略号显示"></a>文本超出省略号显示</h3><blockquote><p>单行文本显示省略号</p></blockquote><pre><code>.ellipsis{    width: 500px;    /* 设置宽度，不设置默认为100% */    white-space: nowrap;    /* 强制文本在一行显示 */    overflow: hidden;    /* 隐藏溢出内容 */    text-overflow: ellipsis;    /* 溢出进行省略 */}</code></pre><blockquote><p>多行文本显示省略号 方法一：私有属性</p></blockquote><pre><code>.ellipsis2{    height: 120px;    line-height: 30px;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    /* 朝向：垂直 */    -webkit-line-clamp: 4;}</code></pre><blockquote><p>多行文本显示省略号 方法二：在最后面加…</p></blockquote><pre><code>.ellipsis3{    height: 120px;    line-height: 30px;    overflow: hidden;    position: relative;    padding-right: 1em;    text-align: justify;}.ellipsis3::before{    content: &#39;...&#39;;    position: absolute;    bottom: 0;    right: 0;}.ellipsis3::after{    content: &#39;&#39;;    width: 1em;    height: 2em;    background-color: red;    position: absolute;    display: inline;    right: 0;}</code></pre><blockquote><p>多行文本显示省略号 方法二：在最后面加渐变</p></blockquote><pre><code>.ellipsis4{    height: 120px;    line-height: 30px;    overflow: hidden;    position: relative;}.ellipsis4::after{    content: &quot;&quot;;    width: 20%;    height: 30px;    background:linear-gradient(to right,rgba(255,255,255,0),#fff 80%);    position: absolute;    bottom: 0;    right: 0;}</code></pre><p><img src="./ellipsis.png" alt="文本超出省略号显示效果图"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css兼容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue directive 指令</title>
      <link href="2020/12/09/directives/"/>
      <url>2020/12/09/directives/</url>
      
        <content type="html"><![CDATA[<blockquote><p>directive的使用以及记录指令的场景、实现</p></blockquote><h3 id="为什么要使用-VueDirective"><a href="#为什么要使用-VueDirective" class="headerlink" title="为什么要使用 VueDirective"></a>为什么要使用 VueDirective</h3><p>在 Vue 实例的方法中写 DOM 操作不可以吗？为什么使用 Vue Directive 来封装 DOM 操作呢？<br>为了实现 View 和 ViewModel 的分离，我们必须封装 DOM 操作，View 层负责页面上的显示，ViewModel 层负责改变操作数据，由于 Vue 是数据驱动的，属于 ViewModel 层，那么其中就不应该出现 View 层上的 DOM 操作，而且，使用 Vue Directive 是和 DOM 元素的创建、销毁绑定的。Vue Directive 的生命周期方法能让我们更优雅的去在合适的时机进行 DOM 的操作。而在 ViewModel 里则没有和 DOM 元素对应的方法。因为 Vue Directive 是属于 View 层面的，所以 DOM 操作应该被封装在 Vue Directive 里而不是出现在 Vue 实例中。</p><p><a href="https://github.com/qiuchunhong/vueProject/blob/master/src/views/directives/index.vue" target="_blank" rel="noopener">基础使用</a></p><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><blockquote><ul><li>某个按钮按下去之前需要先判断它是否登陆，如果没有登陆需要跳转到对应的登陆页面，否则就继续该按钮之后的操作。</li></ul></blockquote><p><strong>store 需要 import 进来</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> directive <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'permission-click'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  bind<span class="token punctuation">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'showLogin'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">typeof</span> binding<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> binding<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>    permissionClick<span class="token punctuation">:</span> <span class="token punctuation">{</span>        bind <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'user/showLogin'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">typeof</span> binding<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> binding<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>v-loading 全局加载</li></ul></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">"loading"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"showLoading"</span><span class="token operator">></span>change loading status<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    showLoading <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token comment" spellcheck="true">// clearTimeout(timer)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token function">update</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>            div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'加载中...'</span>            div<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'loading'</span><span class="token punctuation">)</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token number">0</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100%'</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'100%'</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'flex'</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>justifyContent <span class="token operator">=</span> <span class="token string">'center'</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>alignItems <span class="token operator">=</span> <span class="token string">'center'</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span>            div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'rgba(0, 0, 0, .7)'</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>根据路由角色控制 DOM <strong>(一般是按钮多)</strong> 是否显示</li></ul></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"> bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取按钮权限  路由中 meta 中的角色</span>  <span class="token keyword">let</span> btnPermissions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context<span class="token punctuation">.</span>$route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>btnPermissions<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>btnPermissions<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 不是admin 就不显示</span>      <span class="token comment" spellcheck="true">// 当然此处也可以 将 el 样式隐藏也行</span>   el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>根据后台下发 权限 字段，控制当前 DOM 是否展示</li></ul></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 很多时候，服务器下发了  showBtn 字段就代表 显示某个 按钮，前端一般把控制权限的数据都放在内存中</span> <span class="token comment" spellcheck="true">// 这样写 在 bind update 都会执行</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'check-permission'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> success <span class="token operator">=</span> <span class="token function">checkPermission</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到绑定的值</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>    el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">checkPermission</span><span class="token punctuation">(</span>permissionKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> values <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"userPermissions"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'can not find permissions config from localstorage, function access will be denied.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">===</span> permissionKey<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'===========check permission, key:'</span> <span class="token operator">+</span> permissionKey <span class="token operator">+</span> <span class="token string">", result:"</span> <span class="token operator">+</span> ret <span class="token operator">+</span> <span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用</span>v<span class="token operator">-</span>check<span class="token operator">-</span>permission<span class="token operator">=</span><span class="token string">"'showBtn'"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的网站记录</title>
      <link href="2020/12/09/record/"/>
      <url>2020/12/09/record/</url>
      
        <content type="html"><![CDATA[<h3 id="前端代码规范-由凹凸实验室整理的"><a href="#前端代码规范-由凹凸实验室整理的" class="headerlink" title="前端代码规范-由凹凸实验室整理的"></a><a href="https://guide.aotu.io/docs/index.html" target="_blank" rel="noopener">前端代码规范-由凹凸实验室整理的</a></h3><h3 id="一个合格-优秀-的前端都应该阅读这些文章"><a href="#一个合格-优秀-的前端都应该阅读这些文章" class="headerlink" title="一个合格(优秀)的前端都应该阅读这些文章"></a><a href="https://juejin.im/post/5d387f696fb9a07eeb13ea60#heading-14" target="_blank" rel="noopener">一个合格(优秀)的前端都应该阅读这些文章</a></h3><h3 id="html模板"><a href="#html模板" class="headerlink" title="html模板"></a><a href="https://html5up.net/" target="_blank" rel="noopener">html模板</a></h3><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="神策数据"><a href="#神策数据" class="headerlink" title="神策数据"></a><a href="https://manual.sensorsdata.cn/sa/latest/tech_knowledge-7543368.html" target="_blank" rel="noopener">神策数据</a></h3><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><h3 id="正则-在线演示"><a href="#正则-在线演示" class="headerlink" title="正则-在线演示"></a><a href="https://regexr.com/" target="_blank" rel="noopener">正则-在线演示</a></h3><h3 id="js文档整理-超全的哟"><a href="#js文档整理-超全的哟" class="headerlink" title="js文档整理 - 超全的哟~"></a><a href="https://juejin.im/post/5ebb68796fb9a0435432df8e" target="_blank" rel="noopener">js文档整理 - 超全的哟~</a></h3><h2 id="ide"><a href="#ide" class="headerlink" title="ide"></a>ide</h2><h3 id="Visual-Studio文档-正则搜索"><a href="#Visual-Studio文档-正则搜索" class="headerlink" title="Visual Studio文档 - 正则搜索"></a><a href="https://docs.microsoft.com/zh-cn/visualstudio/ide/using-regular-expressions-in-visual-studio?view=vs-2015&redirectedfrom=MSDN#Visual%20Studio%20%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">Visual Studio文档 - 正则搜索</a></h3><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h3 id="github打开太慢怎么办"><a href="#github打开太慢怎么办" class="headerlink" title="github打开太慢怎么办"></a>github打开太慢怎么办</h3><p><a href="https://gitee.com/docmirror/dev-sidecar?_from=gitee_search" target="_blank" rel="noopener">gitee 中搜索‘dev-sidecar’ 直接下载安装按照说明来，github秒开</a></p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js 字符串常用方法总结</title>
      <link href="2020/12/09/jsStringMethods/"/>
      <url>2020/12/09/jsStringMethods/</url>
      
        <content type="html"><![CDATA[<ul><li><p>str.substr(start[, length]) 截取指定长度字符串    不推荐使用</p></li><li><p>str.substring(indexStart[, indexEnd]) 开始索引到结束索引之间</p></li><li><p>str.slice(beginIndex[, endIndex])</p><blockquote><p>情景模式-参数为负数<br>substr() 会将第一个负参数与字符串长度相加，第二个负参数转化为 0<br>substring() 将所有的负参数转化为 0<br>slice() 会将所有的负数于字符串的长度相加</p></blockquote></li><li><p>indexOf</p></li><li><p>lastIndexOf</p></li><li><p>includes str.includes(‘@’)</p></li><li><p>toUpperCase</p></li><li><p>toLowerCase</p></li><li><p>split 字符串转数组 </p></li><li><p>replace</p></li><li><p>match str.match(regexp)</p></li><li><p>trim 去掉两边的空格</p></li><li><p>trimEnd || trimRight</p></li><li><p>trimStart || trimLeft</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/09/hello-world/"/>
      <url>2020/12/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>$ hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files-生成静态文件"><a href="#Generate-static-files-生成静态文件" class="headerlink" title="Generate static files | 生成静态文件"></a>Generate static files | 生成静态文件</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites-部署到远程站点"><a href="#Deploy-to-remote-sites-部署到远程站点" class="headerlink" title="Deploy to remote sites | 部署到远程站点"></a>Deploy to remote sites | 部署到远程站点</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如出现缓存引起的异常，可在生成命令执行前执行清除缓存命令"><a href="#如出现缓存引起的异常，可在生成命令执行前执行清除缓存命令" class="headerlink" title="如出现缓存引起的异常，可在生成命令执行前执行清除缓存命令"></a>如出现缓存引起的异常，可在生成命令执行前执行清除缓存命令</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="hexo-文档"><a href="#hexo-文档" class="headerlink" title="hexo 文档"></a><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo 文档</a></h3><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js题库</title>
      <link href="2020/07/14/questionBank-js/"/>
      <url>2020/07/14/questionBank-js/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="@item1">判断数据类型：typeof()、instanceof、constructor、Objece.prototype.toString.call()</a></li></ul><h4 id="判断数据类型：typeof-、instanceof、constructor、Objece-prototype-toString-call"><a href="#判断数据类型：typeof-、instanceof、constructor、Objece-prototype-toString-call" class="headerlink" title="判断数据类型：typeof()、instanceof、constructor、Objece.prototype.toString.call()"></a><font id="item1">判断数据类型：typeof()、instanceof、constructor、Objece.prototype.toString.call()</font></h4><ol><li>typeof()<br>typeof 可以判断基础类型[null除外，null返回Object]，引用数据类型Function/Objece/Array反回的都是Object</li><li>[] instanceof Array<br>判断引用对象的类型返回的是true||false，不能判断基础类型[全部返回false]<pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'str'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// false  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// true    </span><span class="token comment" spellcheck="true">// console.log(undefined instanceof Undefined);      // 报错</span><span class="token comment" spellcheck="true">// console.log(null instanceof Null);                // 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>().constructor === Array<pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> String<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里有一个坑，如果我创建一个对象，更改它的原型，constructor就会变得不可靠了</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>Fn.prototype=new Array();</p><p>var f=new Fn();</p><p>console.log(f.constructor===Fn);    // false<br>console.log(f.constructor===Array); // true </p><pre><code>4. Object.prototype.toString.call() 使用 Object 对象的原型方法 toString ，使用 call 进行狸猫换太子，借用Object的 toString 方法```javascriptvar a = Object.prototype.toString;console.log(a.call(2));console.log(a.call(true));console.log(a.call(&#39;str&#39;));console.log(a.call([]));console.log(a.call(function(){}));console.log(a.call({}));console.log(a.call(undefined));console.log(a.call(null));</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js 整合 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
